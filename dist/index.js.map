{"version":3,"file":"index.js","sources":["../node_modules/.pnpm/commander@13.0.0/node_modules/commander/lib/error.js","../node_modules/.pnpm/commander@13.0.0/node_modules/commander/lib/argument.js","../__vite-browser-external","../node_modules/.pnpm/commander@13.0.0/node_modules/commander/lib/help.js","../node_modules/.pnpm/commander@13.0.0/node_modules/commander/lib/option.js","../node_modules/.pnpm/commander@13.0.0/node_modules/commander/lib/suggestSimilar.js","../node_modules/.pnpm/commander@13.0.0/node_modules/commander/lib/command.js","../node_modules/.pnpm/commander@13.0.0/node_modules/commander/index.js","../node_modules/.pnpm/commander@13.0.0/node_modules/commander/index.js?commonjs-entry"],"sourcesContent":["/**\n * CommanderError class\n */\nclass CommanderError extends Error {\n  /**\n   * Constructs the CommanderError class\n   * @param {number} exitCode suggested exit code which could be used with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   */\n  constructor(exitCode, code, message) {\n    super(message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.exitCode = exitCode;\n    this.nestedError = undefined;\n  }\n}\n\n/**\n * InvalidArgumentError class\n */\nclass InvalidArgumentError extends CommanderError {\n  /**\n   * Constructs the InvalidArgumentError class\n   * @param {string} [message] explanation of why argument is invalid\n   */\n  constructor(message) {\n    super(1, 'commander.invalidArgument', message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n  }\n}\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\n","const { InvalidArgumentError } = require('./error.js');\n\nclass Argument {\n  /**\n   * Initialize a new command argument with the given name and description.\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   */\n\n  constructor(name, description) {\n    this.description = description || '';\n    this.variadic = false;\n    this.parseArg = undefined;\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.argChoices = undefined;\n\n    switch (name[0]) {\n      case '<': // e.g. <required>\n        this.required = true;\n        this._name = name.slice(1, -1);\n        break;\n      case '[': // e.g. [optional]\n        this.required = false;\n        this._name = name.slice(1, -1);\n        break;\n      default:\n        this.required = true;\n        this._name = name;\n        break;\n    }\n\n    if (this._name.length > 3 && this._name.slice(-3) === '...') {\n      this.variadic = true;\n      this._name = this._name.slice(0, -3);\n    }\n  }\n\n  /**\n   * Return argument name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    return this._name;\n  }\n\n  /**\n   * @package\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {*} value\n   * @param {string} [description]\n   * @return {Argument}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI command arguments into argument values.\n   *\n   * @param {Function} [fn]\n   * @return {Argument}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Only allow argument value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Argument}\n   */\n\n  choices(values) {\n    this.argChoices = values.slice();\n    this.parseArg = (arg, previous) => {\n      if (!this.argChoices.includes(arg)) {\n        throw new InvalidArgumentError(\n          `Allowed choices are ${this.argChoices.join(', ')}.`,\n        );\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n\n  /**\n   * Make argument required.\n   *\n   * @returns {Argument}\n   */\n  argRequired() {\n    this.required = true;\n    return this;\n  }\n\n  /**\n   * Make argument optional.\n   *\n   * @returns {Argument}\n   */\n  argOptional() {\n    this.required = false;\n    return this;\n  }\n}\n\n/**\n * Takes an argument and returns its human readable equivalent for help usage.\n *\n * @param {Argument} arg\n * @return {string}\n * @private\n */\n\nfunction humanReadableArgName(arg) {\n  const nameOutput = arg.name() + (arg.variadic === true ? '...' : '');\n\n  return arg.required ? '<' + nameOutput + '>' : '[' + nameOutput + ']';\n}\n\nexports.Argument = Argument;\nexports.humanReadableArgName = humanReadableArgName;\n","export default {}","const { humanReadableArgName } = require('./argument.js');\n\n/**\n * TypeScript import types for JSDoc, used by Visual Studio Code IntelliSense and `npm run typescript-checkJS`\n * https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#import-types\n * @typedef { import(\"./argument.js\").Argument } Argument\n * @typedef { import(\"./command.js\").Command } Command\n * @typedef { import(\"./option.js\").Option } Option\n */\n\n// Although this is a class, methods are static in style to allow override using subclass or just functions.\nclass Help {\n  constructor() {\n    this.helpWidth = undefined;\n    this.minWidthToWrap = 40;\n    this.sortSubcommands = false;\n    this.sortOptions = false;\n    this.showGlobalOptions = false;\n  }\n\n  /**\n   * prepareContext is called by Commander after applying overrides from `Command.configureHelp()`\n   * and just before calling `formatHelp()`.\n   *\n   * Commander just uses the helpWidth and the rest is provided for optional use by more complex subclasses.\n   *\n   * @param {{ error?: boolean, helpWidth?: number, outputHasColors?: boolean }} contextOptions\n   */\n  prepareContext(contextOptions) {\n    this.helpWidth = this.helpWidth ?? contextOptions.helpWidth ?? 80;\n  }\n\n  /**\n   * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Command[]}\n   */\n\n  visibleCommands(cmd) {\n    const visibleCommands = cmd.commands.filter((cmd) => !cmd._hidden);\n    const helpCommand = cmd._getHelpCommand();\n    if (helpCommand && !helpCommand._hidden) {\n      visibleCommands.push(helpCommand);\n    }\n    if (this.sortSubcommands) {\n      visibleCommands.sort((a, b) => {\n        // @ts-ignore: because overloaded return type\n        return a.name().localeCompare(b.name());\n      });\n    }\n    return visibleCommands;\n  }\n\n  /**\n   * Compare options for sort.\n   *\n   * @param {Option} a\n   * @param {Option} b\n   * @returns {number}\n   */\n  compareOptions(a, b) {\n    const getSortKey = (option) => {\n      // WYSIWYG for order displayed in help. Short used for comparison if present. No special handling for negated.\n      return option.short\n        ? option.short.replace(/^-/, '')\n        : option.long.replace(/^--/, '');\n    };\n    return getSortKey(a).localeCompare(getSortKey(b));\n  }\n\n  /**\n   * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleOptions(cmd) {\n    const visibleOptions = cmd.options.filter((option) => !option.hidden);\n    // Built-in help option.\n    const helpOption = cmd._getHelpOption();\n    if (helpOption && !helpOption.hidden) {\n      // Automatically hide conflicting flags. Bit dubious but a historical behaviour that is convenient for single-command programs.\n      const removeShort = helpOption.short && cmd._findOption(helpOption.short);\n      const removeLong = helpOption.long && cmd._findOption(helpOption.long);\n      if (!removeShort && !removeLong) {\n        visibleOptions.push(helpOption); // no changes needed\n      } else if (helpOption.long && !removeLong) {\n        visibleOptions.push(\n          cmd.createOption(helpOption.long, helpOption.description),\n        );\n      } else if (helpOption.short && !removeShort) {\n        visibleOptions.push(\n          cmd.createOption(helpOption.short, helpOption.description),\n        );\n      }\n    }\n    if (this.sortOptions) {\n      visibleOptions.sort(this.compareOptions);\n    }\n    return visibleOptions;\n  }\n\n  /**\n   * Get an array of the visible global options. (Not including help.)\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleGlobalOptions(cmd) {\n    if (!this.showGlobalOptions) return [];\n\n    const globalOptions = [];\n    for (\n      let ancestorCmd = cmd.parent;\n      ancestorCmd;\n      ancestorCmd = ancestorCmd.parent\n    ) {\n      const visibleOptions = ancestorCmd.options.filter(\n        (option) => !option.hidden,\n      );\n      globalOptions.push(...visibleOptions);\n    }\n    if (this.sortOptions) {\n      globalOptions.sort(this.compareOptions);\n    }\n    return globalOptions;\n  }\n\n  /**\n   * Get an array of the arguments if any have a description.\n   *\n   * @param {Command} cmd\n   * @returns {Argument[]}\n   */\n\n  visibleArguments(cmd) {\n    // Side effect! Apply the legacy descriptions before the arguments are displayed.\n    if (cmd._argsDescription) {\n      cmd.registeredArguments.forEach((argument) => {\n        argument.description =\n          argument.description || cmd._argsDescription[argument.name()] || '';\n      });\n    }\n\n    // If there are any arguments with a description then return all the arguments.\n    if (cmd.registeredArguments.find((argument) => argument.description)) {\n      return cmd.registeredArguments;\n    }\n    return [];\n  }\n\n  /**\n   * Get the command term to show in the list of subcommands.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandTerm(cmd) {\n    // Legacy. Ignores custom usage string, and nested commands.\n    const args = cmd.registeredArguments\n      .map((arg) => humanReadableArgName(arg))\n      .join(' ');\n    return (\n      cmd._name +\n      (cmd._aliases[0] ? '|' + cmd._aliases[0] : '') +\n      (cmd.options.length ? ' [options]' : '') + // simplistic check for non-help option\n      (args ? ' ' + args : '')\n    );\n  }\n\n  /**\n   * Get the option term to show in the list of options.\n   *\n   * @param {Option} option\n   * @returns {string}\n   */\n\n  optionTerm(option) {\n    return option.flags;\n  }\n\n  /**\n   * Get the argument term to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @returns {string}\n   */\n\n  argumentTerm(argument) {\n    return argument.name();\n  }\n\n  /**\n   * Get the longest command term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestSubcommandTermLength(cmd, helper) {\n    return helper.visibleCommands(cmd).reduce((max, command) => {\n      return Math.max(\n        max,\n        this.displayWidth(\n          helper.styleSubcommandTerm(helper.subcommandTerm(command)),\n        ),\n      );\n    }, 0);\n  }\n\n  /**\n   * Get the longest option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestOptionTermLength(cmd, helper) {\n    return helper.visibleOptions(cmd).reduce((max, option) => {\n      return Math.max(\n        max,\n        this.displayWidth(helper.styleOptionTerm(helper.optionTerm(option))),\n      );\n    }, 0);\n  }\n\n  /**\n   * Get the longest global option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestGlobalOptionTermLength(cmd, helper) {\n    return helper.visibleGlobalOptions(cmd).reduce((max, option) => {\n      return Math.max(\n        max,\n        this.displayWidth(helper.styleOptionTerm(helper.optionTerm(option))),\n      );\n    }, 0);\n  }\n\n  /**\n   * Get the longest argument term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestArgumentTermLength(cmd, helper) {\n    return helper.visibleArguments(cmd).reduce((max, argument) => {\n      return Math.max(\n        max,\n        this.displayWidth(\n          helper.styleArgumentTerm(helper.argumentTerm(argument)),\n        ),\n      );\n    }, 0);\n  }\n\n  /**\n   * Get the command usage to be displayed at the top of the built-in help.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandUsage(cmd) {\n    // Usage\n    let cmdName = cmd._name;\n    if (cmd._aliases[0]) {\n      cmdName = cmdName + '|' + cmd._aliases[0];\n    }\n    let ancestorCmdNames = '';\n    for (\n      let ancestorCmd = cmd.parent;\n      ancestorCmd;\n      ancestorCmd = ancestorCmd.parent\n    ) {\n      ancestorCmdNames = ancestorCmd.name() + ' ' + ancestorCmdNames;\n    }\n    return ancestorCmdNames + cmdName + ' ' + cmd.usage();\n  }\n\n  /**\n   * Get the description for the command.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandDescription(cmd) {\n    // @ts-ignore: because overloaded return type\n    return cmd.description();\n  }\n\n  /**\n   * Get the subcommand summary to show in the list of subcommands.\n   * (Fallback to description for backwards compatibility.)\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandDescription(cmd) {\n    // @ts-ignore: because overloaded return type\n    return cmd.summary() || cmd.description();\n  }\n\n  /**\n   * Get the option description to show in the list of options.\n   *\n   * @param {Option} option\n   * @return {string}\n   */\n\n  optionDescription(option) {\n    const extraInfo = [];\n\n    if (option.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${option.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`,\n      );\n    }\n    if (option.defaultValue !== undefined) {\n      // default for boolean and negated more for programmer than end user,\n      // but show true/false for boolean option as may be for hand-rolled env or config processing.\n      const showDefault =\n        option.required ||\n        option.optional ||\n        (option.isBoolean() && typeof option.defaultValue === 'boolean');\n      if (showDefault) {\n        extraInfo.push(\n          `default: ${option.defaultValueDescription || JSON.stringify(option.defaultValue)}`,\n        );\n      }\n    }\n    // preset for boolean and negated are more for programmer than end user\n    if (option.presetArg !== undefined && option.optional) {\n      extraInfo.push(`preset: ${JSON.stringify(option.presetArg)}`);\n    }\n    if (option.envVar !== undefined) {\n      extraInfo.push(`env: ${option.envVar}`);\n    }\n    if (extraInfo.length > 0) {\n      return `${option.description} (${extraInfo.join(', ')})`;\n    }\n\n    return option.description;\n  }\n\n  /**\n   * Get the argument description to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @return {string}\n   */\n\n  argumentDescription(argument) {\n    const extraInfo = [];\n    if (argument.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${argument.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`,\n      );\n    }\n    if (argument.defaultValue !== undefined) {\n      extraInfo.push(\n        `default: ${argument.defaultValueDescription || JSON.stringify(argument.defaultValue)}`,\n      );\n    }\n    if (extraInfo.length > 0) {\n      const extraDescription = `(${extraInfo.join(', ')})`;\n      if (argument.description) {\n        return `${argument.description} ${extraDescription}`;\n      }\n      return extraDescription;\n    }\n    return argument.description;\n  }\n\n  /**\n   * Generate the built-in help text.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {string}\n   */\n\n  formatHelp(cmd, helper) {\n    const termWidth = helper.padWidth(cmd, helper);\n    const helpWidth = helper.helpWidth ?? 80; // in case prepareContext() was not called\n\n    function callFormatItem(term, description) {\n      return helper.formatItem(term, termWidth, description, helper);\n    }\n\n    // Usage\n    let output = [\n      `${helper.styleTitle('Usage:')} ${helper.styleUsage(helper.commandUsage(cmd))}`,\n      '',\n    ];\n\n    // Description\n    const commandDescription = helper.commandDescription(cmd);\n    if (commandDescription.length > 0) {\n      output = output.concat([\n        helper.boxWrap(\n          helper.styleCommandDescription(commandDescription),\n          helpWidth,\n        ),\n        '',\n      ]);\n    }\n\n    // Arguments\n    const argumentList = helper.visibleArguments(cmd).map((argument) => {\n      return callFormatItem(\n        helper.styleArgumentTerm(helper.argumentTerm(argument)),\n        helper.styleArgumentDescription(helper.argumentDescription(argument)),\n      );\n    });\n    if (argumentList.length > 0) {\n      output = output.concat([\n        helper.styleTitle('Arguments:'),\n        ...argumentList,\n        '',\n      ]);\n    }\n\n    // Options\n    const optionList = helper.visibleOptions(cmd).map((option) => {\n      return callFormatItem(\n        helper.styleOptionTerm(helper.optionTerm(option)),\n        helper.styleOptionDescription(helper.optionDescription(option)),\n      );\n    });\n    if (optionList.length > 0) {\n      output = output.concat([\n        helper.styleTitle('Options:'),\n        ...optionList,\n        '',\n      ]);\n    }\n\n    if (helper.showGlobalOptions) {\n      const globalOptionList = helper\n        .visibleGlobalOptions(cmd)\n        .map((option) => {\n          return callFormatItem(\n            helper.styleOptionTerm(helper.optionTerm(option)),\n            helper.styleOptionDescription(helper.optionDescription(option)),\n          );\n        });\n      if (globalOptionList.length > 0) {\n        output = output.concat([\n          helper.styleTitle('Global Options:'),\n          ...globalOptionList,\n          '',\n        ]);\n      }\n    }\n\n    // Commands\n    const commandList = helper.visibleCommands(cmd).map((cmd) => {\n      return callFormatItem(\n        helper.styleSubcommandTerm(helper.subcommandTerm(cmd)),\n        helper.styleSubcommandDescription(helper.subcommandDescription(cmd)),\n      );\n    });\n    if (commandList.length > 0) {\n      output = output.concat([\n        helper.styleTitle('Commands:'),\n        ...commandList,\n        '',\n      ]);\n    }\n\n    return output.join('\\n');\n  }\n\n  /**\n   * Return display width of string, ignoring ANSI escape sequences. Used in padding and wrapping calculations.\n   *\n   * @param {string} str\n   * @returns {number}\n   */\n  displayWidth(str) {\n    return stripColor(str).length;\n  }\n\n  /**\n   * Style the title for displaying in the help. Called with 'Usage:', 'Options:', etc.\n   *\n   * @param {string} str\n   * @returns {string}\n   */\n  styleTitle(str) {\n    return str;\n  }\n\n  styleUsage(str) {\n    // Usage has lots of parts the user might like to color separately! Assume default usage string which is formed like:\n    //    command subcommand [options] [command] <foo> [bar]\n    return str\n      .split(' ')\n      .map((word) => {\n        if (word === '[options]') return this.styleOptionText(word);\n        if (word === '[command]') return this.styleSubcommandText(word);\n        if (word[0] === '[' || word[0] === '<')\n          return this.styleArgumentText(word);\n        return this.styleCommandText(word); // Restrict to initial words?\n      })\n      .join(' ');\n  }\n  styleCommandDescription(str) {\n    return this.styleDescriptionText(str);\n  }\n  styleOptionDescription(str) {\n    return this.styleDescriptionText(str);\n  }\n  styleSubcommandDescription(str) {\n    return this.styleDescriptionText(str);\n  }\n  styleArgumentDescription(str) {\n    return this.styleDescriptionText(str);\n  }\n  styleDescriptionText(str) {\n    return str;\n  }\n  styleOptionTerm(str) {\n    return this.styleOptionText(str);\n  }\n  styleSubcommandTerm(str) {\n    // This is very like usage with lots of parts! Assume default string which is formed like:\n    //    subcommand [options] <foo> [bar]\n    return str\n      .split(' ')\n      .map((word) => {\n        if (word === '[options]') return this.styleOptionText(word);\n        if (word[0] === '[' || word[0] === '<')\n          return this.styleArgumentText(word);\n        return this.styleSubcommandText(word); // Restrict to initial words?\n      })\n      .join(' ');\n  }\n  styleArgumentTerm(str) {\n    return this.styleArgumentText(str);\n  }\n  styleOptionText(str) {\n    return str;\n  }\n  styleArgumentText(str) {\n    return str;\n  }\n  styleSubcommandText(str) {\n    return str;\n  }\n  styleCommandText(str) {\n    return str;\n  }\n\n  /**\n   * Calculate the pad width from the maximum term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  padWidth(cmd, helper) {\n    return Math.max(\n      helper.longestOptionTermLength(cmd, helper),\n      helper.longestGlobalOptionTermLength(cmd, helper),\n      helper.longestSubcommandTermLength(cmd, helper),\n      helper.longestArgumentTermLength(cmd, helper),\n    );\n  }\n\n  /**\n   * Detect manually wrapped and indented strings by checking for line break followed by whitespace.\n   *\n   * @param {string} str\n   * @returns {boolean}\n   */\n  preformatted(str) {\n    return /\\n[^\\S\\r\\n]/.test(str);\n  }\n\n  /**\n   * Format the \"item\", which consists of a term and description. Pad the term and wrap the description, indenting the following lines.\n   *\n   * So \"TTT\", 5, \"DDD DDDD DD DDD\" might be formatted for this.helpWidth=17 like so:\n   *   TTT  DDD DDDD\n   *        DD DDD\n   *\n   * @param {string} term\n   * @param {number} termWidth\n   * @param {string} description\n   * @param {Help} helper\n   * @returns {string}\n   */\n  formatItem(term, termWidth, description, helper) {\n    const itemIndent = 2;\n    const itemIndentStr = ' '.repeat(itemIndent);\n    if (!description) return itemIndentStr + term;\n\n    // Pad the term out to a consistent width, so descriptions are aligned.\n    const paddedTerm = term.padEnd(\n      termWidth + term.length - helper.displayWidth(term),\n    );\n\n    // Format the description.\n    const spacerWidth = 2; // between term and description\n    const helpWidth = this.helpWidth ?? 80; // in case prepareContext() was not called\n    const remainingWidth = helpWidth - termWidth - spacerWidth - itemIndent;\n    let formattedDescription;\n    if (\n      remainingWidth < this.minWidthToWrap ||\n      helper.preformatted(description)\n    ) {\n      formattedDescription = description;\n    } else {\n      const wrappedDescription = helper.boxWrap(description, remainingWidth);\n      formattedDescription = wrappedDescription.replace(\n        /\\n/g,\n        '\\n' + ' '.repeat(termWidth + spacerWidth),\n      );\n    }\n\n    // Construct and overall indent.\n    return (\n      itemIndentStr +\n      paddedTerm +\n      ' '.repeat(spacerWidth) +\n      formattedDescription.replace(/\\n/g, `\\n${itemIndentStr}`)\n    );\n  }\n\n  /**\n   * Wrap a string at whitespace, preserving existing line breaks.\n   * Wrapping is skipped if the width is less than `minWidthToWrap`.\n   *\n   * @param {string} str\n   * @param {number} width\n   * @returns {string}\n   */\n  boxWrap(str, width) {\n    if (width < this.minWidthToWrap) return str;\n\n    const rawLines = str.split(/\\r\\n|\\n/);\n    // split up text by whitespace\n    const chunkPattern = /[\\s]*[^\\s]+/g;\n    const wrappedLines = [];\n    rawLines.forEach((line) => {\n      const chunks = line.match(chunkPattern);\n      if (chunks === null) {\n        wrappedLines.push('');\n        return;\n      }\n\n      let sumChunks = [chunks.shift()];\n      let sumWidth = this.displayWidth(sumChunks[0]);\n      chunks.forEach((chunk) => {\n        const visibleWidth = this.displayWidth(chunk);\n        // Accumulate chunks while they fit into width.\n        if (sumWidth + visibleWidth <= width) {\n          sumChunks.push(chunk);\n          sumWidth += visibleWidth;\n          return;\n        }\n        wrappedLines.push(sumChunks.join(''));\n\n        const nextChunk = chunk.trimStart(); // trim space at line break\n        sumChunks = [nextChunk];\n        sumWidth = this.displayWidth(nextChunk);\n      });\n      wrappedLines.push(sumChunks.join(''));\n    });\n\n    return wrappedLines.join('\\n');\n  }\n}\n\n/**\n * Strip style ANSI escape sequences from the string. In particular, SGR (Select Graphic Rendition) codes.\n *\n * @param {string} str\n * @returns {string}\n * @package\n */\n\nfunction stripColor(str) {\n  // eslint-disable-next-line no-control-regex\n  const sgrPattern = /\\x1b\\[\\d*(;\\d*)*m/g;\n  return str.replace(sgrPattern, '');\n}\n\nexports.Help = Help;\nexports.stripColor = stripColor;\n","const { InvalidArgumentError } = require('./error.js');\n\nclass Option {\n  /**\n   * Initialize a new `Option` with the given `flags` and `description`.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   */\n\n  constructor(flags, description) {\n    this.flags = flags;\n    this.description = description || '';\n\n    this.required = flags.includes('<'); // A value must be supplied when the option is specified.\n    this.optional = flags.includes('['); // A value is optional when the option is specified.\n    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument\n    this.variadic = /\\w\\.\\.\\.[>\\]]$/.test(flags); // The option can take multiple values.\n    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\n    const optionFlags = splitOptionFlags(flags);\n    this.short = optionFlags.shortFlag;\n    this.long = optionFlags.longFlag;\n    this.negate = false;\n    if (this.long) {\n      this.negate = this.long.startsWith('--no-');\n    }\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.presetArg = undefined;\n    this.envVar = undefined;\n    this.parseArg = undefined;\n    this.hidden = false;\n    this.argChoices = undefined;\n    this.conflictsWith = [];\n    this.implied = undefined;\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {*} value\n   * @param {string} [description]\n   * @return {Option}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Preset to use when option used without option-argument, especially optional but also boolean and negated.\n   * The custom processing (parseArg) is called.\n   *\n   * @example\n   * new Option('--color').default('GREYSCALE').preset('RGB');\n   * new Option('--donate [amount]').preset('20').argParser(parseFloat);\n   *\n   * @param {*} arg\n   * @return {Option}\n   */\n\n  preset(arg) {\n    this.presetArg = arg;\n    return this;\n  }\n\n  /**\n   * Add option name(s) that conflict with this option.\n   * An error will be displayed if conflicting options are found during parsing.\n   *\n   * @example\n   * new Option('--rgb').conflicts('cmyk');\n   * new Option('--js').conflicts(['ts', 'jsx']);\n   *\n   * @param {(string | string[])} names\n   * @return {Option}\n   */\n\n  conflicts(names) {\n    this.conflictsWith = this.conflictsWith.concat(names);\n    return this;\n  }\n\n  /**\n   * Specify implied option values for when this option is set and the implied options are not.\n   *\n   * The custom processing (parseArg) is not called on the implied values.\n   *\n   * @example\n   * program\n   *   .addOption(new Option('--log', 'write logging information to file'))\n   *   .addOption(new Option('--trace', 'log extra details').implies({ log: 'trace.txt' }));\n   *\n   * @param {object} impliedOptionValues\n   * @return {Option}\n   */\n  implies(impliedOptionValues) {\n    let newImplied = impliedOptionValues;\n    if (typeof impliedOptionValues === 'string') {\n      // string is not documented, but easy mistake and we can do what user probably intended.\n      newImplied = { [impliedOptionValues]: true };\n    }\n    this.implied = Object.assign(this.implied || {}, newImplied);\n    return this;\n  }\n\n  /**\n   * Set environment variable to check for option value.\n   *\n   * An environment variable is only used if when processed the current option value is\n   * undefined, or the source of the current value is 'default' or 'config' or 'env'.\n   *\n   * @param {string} name\n   * @return {Option}\n   */\n\n  env(name) {\n    this.envVar = name;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI option arguments into option values.\n   *\n   * @param {Function} [fn]\n   * @return {Option}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Whether the option is mandatory and must have a value after parsing.\n   *\n   * @param {boolean} [mandatory=true]\n   * @return {Option}\n   */\n\n  makeOptionMandatory(mandatory = true) {\n    this.mandatory = !!mandatory;\n    return this;\n  }\n\n  /**\n   * Hide option in help.\n   *\n   * @param {boolean} [hide=true]\n   * @return {Option}\n   */\n\n  hideHelp(hide = true) {\n    this.hidden = !!hide;\n    return this;\n  }\n\n  /**\n   * @package\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Option}\n   */\n\n  choices(values) {\n    this.argChoices = values.slice();\n    this.parseArg = (arg, previous) => {\n      if (!this.argChoices.includes(arg)) {\n        throw new InvalidArgumentError(\n          `Allowed choices are ${this.argChoices.join(', ')}.`,\n        );\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n\n  /**\n   * Return option name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    if (this.long) {\n      return this.long.replace(/^--/, '');\n    }\n    return this.short.replace(/^-/, '');\n  }\n\n  /**\n   * Return option name, in a camelcase format that can be used\n   * as an object attribute key.\n   *\n   * @return {string}\n   */\n\n  attributeName() {\n    if (this.negate) {\n      return camelcase(this.name().replace(/^no-/, ''));\n    }\n    return camelcase(this.name());\n  }\n\n  /**\n   * Check if `arg` matches the short or long flag.\n   *\n   * @param {string} arg\n   * @return {boolean}\n   * @package\n   */\n\n  is(arg) {\n    return this.short === arg || this.long === arg;\n  }\n\n  /**\n   * Return whether a boolean option.\n   *\n   * Options are one of boolean, negated, required argument, or optional argument.\n   *\n   * @return {boolean}\n   * @package\n   */\n\n  isBoolean() {\n    return !this.required && !this.optional && !this.negate;\n  }\n}\n\n/**\n * This class is to make it easier to work with dual options, without changing the existing\n * implementation. We support separate dual options for separate positive and negative options,\n * like `--build` and `--no-build`, which share a single option value. This works nicely for some\n * use cases, but is tricky for others where we want separate behaviours despite\n * the single shared option value.\n */\nclass DualOptions {\n  /**\n   * @param {Option[]} options\n   */\n  constructor(options) {\n    this.positiveOptions = new Map();\n    this.negativeOptions = new Map();\n    this.dualOptions = new Set();\n    options.forEach((option) => {\n      if (option.negate) {\n        this.negativeOptions.set(option.attributeName(), option);\n      } else {\n        this.positiveOptions.set(option.attributeName(), option);\n      }\n    });\n    this.negativeOptions.forEach((value, key) => {\n      if (this.positiveOptions.has(key)) {\n        this.dualOptions.add(key);\n      }\n    });\n  }\n\n  /**\n   * Did the value come from the option, and not from possible matching dual option?\n   *\n   * @param {*} value\n   * @param {Option} option\n   * @returns {boolean}\n   */\n  valueFromOption(value, option) {\n    const optionKey = option.attributeName();\n    if (!this.dualOptions.has(optionKey)) return true;\n\n    // Use the value to deduce if (probably) came from the option.\n    const preset = this.negativeOptions.get(optionKey).presetArg;\n    const negativeValue = preset !== undefined ? preset : false;\n    return option.negate === (negativeValue === value);\n  }\n}\n\n/**\n * Convert string from kebab-case to camelCase.\n *\n * @param {string} str\n * @return {string}\n * @private\n */\n\nfunction camelcase(str) {\n  return str.split('-').reduce((str, word) => {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Split the short and long flag out of something like '-m,--mixed <value>'\n *\n * @private\n */\n\nfunction splitOptionFlags(flags) {\n  let shortFlag;\n  let longFlag;\n  // short flag, single dash and single character\n  const shortFlagExp = /^-[^-]$/;\n  // long flag, double dash and at least one character\n  const longFlagExp = /^--[^-]/;\n\n  const flagParts = flags.split(/[ |,]+/).concat('guard');\n  if (shortFlagExp.test(flagParts[0])) shortFlag = flagParts.shift();\n  if (longFlagExp.test(flagParts[0])) longFlag = flagParts.shift();\n\n  // Check for some unsupported flags that people try.\n  if (/^-[^-][^-]/.test(flagParts[0]))\n    throw new Error(\n      `invalid Option flags, short option is dash and single character: '${flags}'`,\n    );\n  if (shortFlag && shortFlagExp.test(flagParts[0]))\n    throw new Error(\n      `invalid Option flags, more than one short flag: '${flags}'`,\n    );\n  if (longFlag && longFlagExp.test(flagParts[0]))\n    throw new Error(\n      `invalid Option flags, more than one long flag: '${flags}'`,\n    );\n  // Generic error if failed to find a flag or an unexpected flag left over.\n  if (!(shortFlag || longFlag) || flagParts[0].startsWith('-'))\n    throw new Error(`invalid Option flags: '${flags}'`);\n\n  return { shortFlag, longFlag };\n}\n\nexports.Option = Option;\nexports.DualOptions = DualOptions;\n","const maxDistance = 3;\n\nfunction editDistance(a, b) {\n  // https://en.wikipedia.org/wiki/Damerau–Levenshtein_distance\n  // Calculating optimal string alignment distance, no substring is edited more than once.\n  // (Simple implementation.)\n\n  // Quick early exit, return worst case.\n  if (Math.abs(a.length - b.length) > maxDistance)\n    return Math.max(a.length, b.length);\n\n  // distance between prefix substrings of a and b\n  const d = [];\n\n  // pure deletions turn a into empty string\n  for (let i = 0; i <= a.length; i++) {\n    d[i] = [i];\n  }\n  // pure insertions turn empty string into b\n  for (let j = 0; j <= b.length; j++) {\n    d[0][j] = j;\n  }\n\n  // fill matrix\n  for (let j = 1; j <= b.length; j++) {\n    for (let i = 1; i <= a.length; i++) {\n      let cost = 1;\n      if (a[i - 1] === b[j - 1]) {\n        cost = 0;\n      } else {\n        cost = 1;\n      }\n      d[i][j] = Math.min(\n        d[i - 1][j] + 1, // deletion\n        d[i][j - 1] + 1, // insertion\n        d[i - 1][j - 1] + cost, // substitution\n      );\n      // transposition\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + 1);\n      }\n    }\n  }\n\n  return d[a.length][b.length];\n}\n\n/**\n * Find close matches, restricted to same number of edits.\n *\n * @param {string} word\n * @param {string[]} candidates\n * @returns {string}\n */\n\nfunction suggestSimilar(word, candidates) {\n  if (!candidates || candidates.length === 0) return '';\n  // remove possible duplicates\n  candidates = Array.from(new Set(candidates));\n\n  const searchingOptions = word.startsWith('--');\n  if (searchingOptions) {\n    word = word.slice(2);\n    candidates = candidates.map((candidate) => candidate.slice(2));\n  }\n\n  let similar = [];\n  let bestDistance = maxDistance;\n  const minSimilarity = 0.4;\n  candidates.forEach((candidate) => {\n    if (candidate.length <= 1) return; // no one character guesses\n\n    const distance = editDistance(word, candidate);\n    const length = Math.max(word.length, candidate.length);\n    const similarity = (length - distance) / length;\n    if (similarity > minSimilarity) {\n      if (distance < bestDistance) {\n        // better edit distance, throw away previous worse matches\n        bestDistance = distance;\n        similar = [candidate];\n      } else if (distance === bestDistance) {\n        similar.push(candidate);\n      }\n    }\n  });\n\n  similar.sort((a, b) => a.localeCompare(b));\n  if (searchingOptions) {\n    similar = similar.map((candidate) => `--${candidate}`);\n  }\n\n  if (similar.length > 1) {\n    return `\\n(Did you mean one of ${similar.join(', ')}?)`;\n  }\n  if (similar.length === 1) {\n    return `\\n(Did you mean ${similar[0]}?)`;\n  }\n  return '';\n}\n\nexports.suggestSimilar = suggestSimilar;\n","const EventEmitter = require('node:events').EventEmitter;\nconst childProcess = require('node:child_process');\nconst path = require('node:path');\nconst fs = require('node:fs');\nconst process = require('node:process');\n\nconst { Argument, humanReadableArgName } = require('./argument.js');\nconst { CommanderError } = require('./error.js');\nconst { Help, stripColor } = require('./help.js');\nconst { Option, DualOptions } = require('./option.js');\nconst { suggestSimilar } = require('./suggestSimilar');\n\nclass Command extends EventEmitter {\n  /**\n   * Initialize a new `Command`.\n   *\n   * @param {string} [name]\n   */\n\n  constructor(name) {\n    super();\n    /** @type {Command[]} */\n    this.commands = [];\n    /** @type {Option[]} */\n    this.options = [];\n    this.parent = null;\n    this._allowUnknownOption = false;\n    this._allowExcessArguments = false;\n    /** @type {Argument[]} */\n    this.registeredArguments = [];\n    this._args = this.registeredArguments; // deprecated old name\n    /** @type {string[]} */\n    this.args = []; // cli args with options removed\n    this.rawArgs = [];\n    this.processedArgs = []; // like .args but after custom processing and collecting variadic\n    this._scriptPath = null;\n    this._name = name || '';\n    this._optionValues = {};\n    this._optionValueSources = {}; // default, env, cli etc\n    this._storeOptionsAsProperties = false;\n    this._actionHandler = null;\n    this._executableHandler = false;\n    this._executableFile = null; // custom name for executable\n    this._executableDir = null; // custom search directory for subcommands\n    this._defaultCommandName = null;\n    this._exitCallback = null;\n    this._aliases = [];\n    this._combineFlagAndOptionalValue = true;\n    this._description = '';\n    this._summary = '';\n    this._argsDescription = undefined; // legacy\n    this._enablePositionalOptions = false;\n    this._passThroughOptions = false;\n    this._lifeCycleHooks = {}; // a hash of arrays\n    /** @type {(boolean | string)} */\n    this._showHelpAfterError = false;\n    this._showSuggestionAfterError = true;\n    this._savedState = null; // used in save/restoreStateBeforeParse\n\n    // see configureOutput() for docs\n    this._outputConfiguration = {\n      writeOut: (str) => process.stdout.write(str),\n      writeErr: (str) => process.stderr.write(str),\n      outputError: (str, write) => write(str),\n      getOutHelpWidth: () =>\n        process.stdout.isTTY ? process.stdout.columns : undefined,\n      getErrHelpWidth: () =>\n        process.stderr.isTTY ? process.stderr.columns : undefined,\n      getOutHasColors: () =>\n        useColor() ?? (process.stdout.isTTY && process.stdout.hasColors?.()),\n      getErrHasColors: () =>\n        useColor() ?? (process.stderr.isTTY && process.stderr.hasColors?.()),\n      stripColor: (str) => stripColor(str),\n    };\n\n    this._hidden = false;\n    /** @type {(Option | null | undefined)} */\n    this._helpOption = undefined; // Lazy created on demand. May be null if help option is disabled.\n    this._addImplicitHelpCommand = undefined; // undecided whether true or false yet, not inherited\n    /** @type {Command} */\n    this._helpCommand = undefined; // lazy initialised, inherited\n    this._helpConfiguration = {};\n  }\n\n  /**\n   * Copy settings that are useful to have in common across root command and subcommands.\n   *\n   * (Used internally when adding a command using `.command()` so subcommands inherit parent settings.)\n   *\n   * @param {Command} sourceCommand\n   * @return {Command} `this` command for chaining\n   */\n  copyInheritedSettings(sourceCommand) {\n    this._outputConfiguration = sourceCommand._outputConfiguration;\n    this._helpOption = sourceCommand._helpOption;\n    this._helpCommand = sourceCommand._helpCommand;\n    this._helpConfiguration = sourceCommand._helpConfiguration;\n    this._exitCallback = sourceCommand._exitCallback;\n    this._storeOptionsAsProperties = sourceCommand._storeOptionsAsProperties;\n    this._combineFlagAndOptionalValue =\n      sourceCommand._combineFlagAndOptionalValue;\n    this._allowExcessArguments = sourceCommand._allowExcessArguments;\n    this._enablePositionalOptions = sourceCommand._enablePositionalOptions;\n    this._showHelpAfterError = sourceCommand._showHelpAfterError;\n    this._showSuggestionAfterError = sourceCommand._showSuggestionAfterError;\n\n    return this;\n  }\n\n  /**\n   * @returns {Command[]}\n   * @private\n   */\n\n  _getCommandAndAncestors() {\n    const result = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    for (let command = this; command; command = command.parent) {\n      result.push(command);\n    }\n    return result;\n  }\n\n  /**\n   * Define a command.\n   *\n   * There are two styles of command: pay attention to where to put the description.\n   *\n   * @example\n   * // Command implemented using action handler (description is supplied separately to `.command`)\n   * program\n   *   .command('clone <source> [destination]')\n   *   .description('clone a repository into a newly created directory')\n   *   .action((source, destination) => {\n   *     console.log('clone command called');\n   *   });\n   *\n   * // Command implemented using separate executable file (description is second parameter to `.command`)\n   * program\n   *   .command('start <service>', 'start named service')\n   *   .command('stop [service]', 'stop named service, or all if no name supplied');\n   *\n   * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`\n   * @param {(object | string)} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)\n   * @param {object} [execOpts] - configuration options (for executable)\n   * @return {Command} returns new command for action handler, or `this` for executable command\n   */\n\n  command(nameAndArgs, actionOptsOrExecDesc, execOpts) {\n    let desc = actionOptsOrExecDesc;\n    let opts = execOpts;\n    if (typeof desc === 'object' && desc !== null) {\n      opts = desc;\n      desc = null;\n    }\n    opts = opts || {};\n    const [, name, args] = nameAndArgs.match(/([^ ]+) *(.*)/);\n\n    const cmd = this.createCommand(name);\n    if (desc) {\n      cmd.description(desc);\n      cmd._executableHandler = true;\n    }\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden\n    cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor\n    if (args) cmd.arguments(args);\n    this._registerCommand(cmd);\n    cmd.parent = this;\n    cmd.copyInheritedSettings(this);\n\n    if (desc) return this;\n    return cmd;\n  }\n\n  /**\n   * Factory routine to create a new unattached command.\n   *\n   * See .command() for creating an attached subcommand, which uses this routine to\n   * create the command. You can override createCommand to customise subcommands.\n   *\n   * @param {string} [name]\n   * @return {Command} new command\n   */\n\n  createCommand(name) {\n    return new Command(name);\n  }\n\n  /**\n   * You can customise the help with a subclass of Help by overriding createHelp,\n   * or by overriding Help properties using configureHelp().\n   *\n   * @return {Help}\n   */\n\n  createHelp() {\n    return Object.assign(new Help(), this.configureHelp());\n  }\n\n  /**\n   * You can customise the help by overriding Help properties using configureHelp(),\n   * or with a subclass of Help by overriding createHelp().\n   *\n   * @param {object} [configuration] - configuration options\n   * @return {(Command | object)} `this` command for chaining, or stored configuration\n   */\n\n  configureHelp(configuration) {\n    if (configuration === undefined) return this._helpConfiguration;\n\n    this._helpConfiguration = configuration;\n    return this;\n  }\n\n  /**\n   * The default output goes to stdout and stderr. You can customise this for special\n   * applications. You can also customise the display of errors by overriding outputError.\n   *\n   * The configuration properties are all functions:\n   *\n   *     // change how output being written, defaults to stdout and stderr\n   *     writeOut(str)\n   *     writeErr(str)\n   *     // change how output being written for errors, defaults to writeErr\n   *     outputError(str, write) // used for displaying errors and not used for displaying help\n   *     // specify width for wrapping help\n   *     getOutHelpWidth()\n   *     getErrHelpWidth()\n   *     // color support, currently only used with Help\n   *     getOutHasColors()\n   *     getErrHasColors()\n   *     stripColor() // used to remove ANSI escape codes if output does not have colors\n   *\n   * @param {object} [configuration] - configuration options\n   * @return {(Command | object)} `this` command for chaining, or stored configuration\n   */\n\n  configureOutput(configuration) {\n    if (configuration === undefined) return this._outputConfiguration;\n\n    Object.assign(this._outputConfiguration, configuration);\n    return this;\n  }\n\n  /**\n   * Display the help or a custom message after an error occurs.\n   *\n   * @param {(boolean|string)} [displayHelp]\n   * @return {Command} `this` command for chaining\n   */\n  showHelpAfterError(displayHelp = true) {\n    if (typeof displayHelp !== 'string') displayHelp = !!displayHelp;\n    this._showHelpAfterError = displayHelp;\n    return this;\n  }\n\n  /**\n   * Display suggestion of similar commands for unknown commands, or options for unknown options.\n   *\n   * @param {boolean} [displaySuggestion]\n   * @return {Command} `this` command for chaining\n   */\n  showSuggestionAfterError(displaySuggestion = true) {\n    this._showSuggestionAfterError = !!displaySuggestion;\n    return this;\n  }\n\n  /**\n   * Add a prepared subcommand.\n   *\n   * See .command() for creating an attached subcommand which inherits settings from its parent.\n   *\n   * @param {Command} cmd - new subcommand\n   * @param {object} [opts] - configuration options\n   * @return {Command} `this` command for chaining\n   */\n\n  addCommand(cmd, opts) {\n    if (!cmd._name) {\n      throw new Error(`Command passed to .addCommand() must have a name\n- specify the name in Command constructor or using .name()`);\n    }\n\n    opts = opts || {};\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation\n\n    this._registerCommand(cmd);\n    cmd.parent = this;\n    cmd._checkForBrokenPassThrough();\n\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached argument.\n   *\n   * See .argument() for creating an attached argument, which uses this routine to\n   * create the argument. You can override createArgument to return a custom argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @return {Argument} new argument\n   */\n\n  createArgument(name, description) {\n    return new Argument(name, description);\n  }\n\n  /**\n   * Define argument syntax for command.\n   *\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @example\n   * program.argument('<input-file>');\n   * program.argument('[output-file]');\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @param {(Function|*)} [fn] - custom argument processing function\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n  argument(name, description, fn, defaultValue) {\n    const argument = this.createArgument(name, description);\n    if (typeof fn === 'function') {\n      argument.default(defaultValue).argParser(fn);\n    } else {\n      argument.default(fn);\n    }\n    this.addArgument(argument);\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding multiple at once (without descriptions).\n   *\n   * See also .argument().\n   *\n   * @example\n   * program.arguments('<cmd> [env]');\n   *\n   * @param {string} names\n   * @return {Command} `this` command for chaining\n   */\n\n  arguments(names) {\n    names\n      .trim()\n      .split(/ +/)\n      .forEach((detail) => {\n        this.argument(detail);\n      });\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding a prepared argument.\n   *\n   * @param {Argument} argument\n   * @return {Command} `this` command for chaining\n   */\n  addArgument(argument) {\n    const previousArgument = this.registeredArguments.slice(-1)[0];\n    if (previousArgument && previousArgument.variadic) {\n      throw new Error(\n        `only the last argument can be variadic '${previousArgument.name()}'`,\n      );\n    }\n    if (\n      argument.required &&\n      argument.defaultValue !== undefined &&\n      argument.parseArg === undefined\n    ) {\n      throw new Error(\n        `a default value for a required argument is never used: '${argument.name()}'`,\n      );\n    }\n    this.registeredArguments.push(argument);\n    return this;\n  }\n\n  /**\n   * Customise or override default help command. By default a help command is automatically added if your command has subcommands.\n   *\n   * @example\n   *    program.helpCommand('help [cmd]');\n   *    program.helpCommand('help [cmd]', 'show help');\n   *    program.helpCommand(false); // suppress default help command\n   *    program.helpCommand(true); // add help command even if no subcommands\n   *\n   * @param {string|boolean} enableOrNameAndArgs - enable with custom name and/or arguments, or boolean to override whether added\n   * @param {string} [description] - custom description\n   * @return {Command} `this` command for chaining\n   */\n\n  helpCommand(enableOrNameAndArgs, description) {\n    if (typeof enableOrNameAndArgs === 'boolean') {\n      this._addImplicitHelpCommand = enableOrNameAndArgs;\n      return this;\n    }\n\n    enableOrNameAndArgs = enableOrNameAndArgs ?? 'help [command]';\n    const [, helpName, helpArgs] = enableOrNameAndArgs.match(/([^ ]+) *(.*)/);\n    const helpDescription = description ?? 'display help for command';\n\n    const helpCommand = this.createCommand(helpName);\n    helpCommand.helpOption(false);\n    if (helpArgs) helpCommand.arguments(helpArgs);\n    if (helpDescription) helpCommand.description(helpDescription);\n\n    this._addImplicitHelpCommand = true;\n    this._helpCommand = helpCommand;\n\n    return this;\n  }\n\n  /**\n   * Add prepared custom help command.\n   *\n   * @param {(Command|string|boolean)} helpCommand - custom help command, or deprecated enableOrNameAndArgs as for `.helpCommand()`\n   * @param {string} [deprecatedDescription] - deprecated custom description used with custom name only\n   * @return {Command} `this` command for chaining\n   */\n  addHelpCommand(helpCommand, deprecatedDescription) {\n    // If not passed an object, call through to helpCommand for backwards compatibility,\n    // as addHelpCommand was originally used like helpCommand is now.\n    if (typeof helpCommand !== 'object') {\n      this.helpCommand(helpCommand, deprecatedDescription);\n      return this;\n    }\n\n    this._addImplicitHelpCommand = true;\n    this._helpCommand = helpCommand;\n    return this;\n  }\n\n  /**\n   * Lazy create help command.\n   *\n   * @return {(Command|null)}\n   * @package\n   */\n  _getHelpCommand() {\n    const hasImplicitHelpCommand =\n      this._addImplicitHelpCommand ??\n      (this.commands.length &&\n        !this._actionHandler &&\n        !this._findCommand('help'));\n\n    if (hasImplicitHelpCommand) {\n      if (this._helpCommand === undefined) {\n        this.helpCommand(undefined, undefined); // use default name and description\n      }\n      return this._helpCommand;\n    }\n    return null;\n  }\n\n  /**\n   * Add hook for life cycle event.\n   *\n   * @param {string} event\n   * @param {Function} listener\n   * @return {Command} `this` command for chaining\n   */\n\n  hook(event, listener) {\n    const allowedValues = ['preSubcommand', 'preAction', 'postAction'];\n    if (!allowedValues.includes(event)) {\n      throw new Error(`Unexpected value for event passed to hook : '${event}'.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    if (this._lifeCycleHooks[event]) {\n      this._lifeCycleHooks[event].push(listener);\n    } else {\n      this._lifeCycleHooks[event] = [listener];\n    }\n    return this;\n  }\n\n  /**\n   * Register callback to use as replacement for calling process.exit.\n   *\n   * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing\n   * @return {Command} `this` command for chaining\n   */\n\n  exitOverride(fn) {\n    if (fn) {\n      this._exitCallback = fn;\n    } else {\n      this._exitCallback = (err) => {\n        if (err.code !== 'commander.executeSubCommandAsync') {\n          throw err;\n        } else {\n          // Async callback from spawn events, not useful to throw.\n        }\n      };\n    }\n    return this;\n  }\n\n  /**\n   * Call process.exit, and _exitCallback if defined.\n   *\n   * @param {number} exitCode exit code for using with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @return never\n   * @private\n   */\n\n  _exit(exitCode, code, message) {\n    if (this._exitCallback) {\n      this._exitCallback(new CommanderError(exitCode, code, message));\n      // Expecting this line is not reached.\n    }\n    process.exit(exitCode);\n  }\n\n  /**\n   * Register callback `fn` for the command.\n   *\n   * @example\n   * program\n   *   .command('serve')\n   *   .description('start service')\n   *   .action(function() {\n   *      // do work here\n   *   });\n   *\n   * @param {Function} fn\n   * @return {Command} `this` command for chaining\n   */\n\n  action(fn) {\n    const listener = (args) => {\n      // The .action callback takes an extra parameter which is the command or options.\n      const expectedArgsCount = this.registeredArguments.length;\n      const actionArgs = args.slice(0, expectedArgsCount);\n      if (this._storeOptionsAsProperties) {\n        actionArgs[expectedArgsCount] = this; // backwards compatible \"options\"\n      } else {\n        actionArgs[expectedArgsCount] = this.opts();\n      }\n      actionArgs.push(this);\n\n      return fn.apply(this, actionArgs);\n    };\n    this._actionHandler = listener;\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached option.\n   *\n   * See .option() for creating an attached option, which uses this routine to\n   * create the option. You can override createOption to return a custom option.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @return {Option} new option\n   */\n\n  createOption(flags, description) {\n    return new Option(flags, description);\n  }\n\n  /**\n   * Wrap parseArgs to catch 'commander.invalidArgument'.\n   *\n   * @param {(Option | Argument)} target\n   * @param {string} value\n   * @param {*} previous\n   * @param {string} invalidArgumentMessage\n   * @private\n   */\n\n  _callParseArg(target, value, previous, invalidArgumentMessage) {\n    try {\n      return target.parseArg(value, previous);\n    } catch (err) {\n      if (err.code === 'commander.invalidArgument') {\n        const message = `${invalidArgumentMessage} ${err.message}`;\n        this.error(message, { exitCode: err.exitCode, code: err.code });\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Check for option flag conflicts.\n   * Register option if no conflicts found, or throw on conflict.\n   *\n   * @param {Option} option\n   * @private\n   */\n\n  _registerOption(option) {\n    const matchingOption =\n      (option.short && this._findOption(option.short)) ||\n      (option.long && this._findOption(option.long));\n    if (matchingOption) {\n      const matchingFlag =\n        option.long && this._findOption(option.long)\n          ? option.long\n          : option.short;\n      throw new Error(`Cannot add option '${option.flags}'${this._name && ` to command '${this._name}'`} due to conflicting flag '${matchingFlag}'\n-  already used by option '${matchingOption.flags}'`);\n    }\n\n    this.options.push(option);\n  }\n\n  /**\n   * Check for command name and alias conflicts with existing commands.\n   * Register command if no conflicts found, or throw on conflict.\n   *\n   * @param {Command} command\n   * @private\n   */\n\n  _registerCommand(command) {\n    const knownBy = (cmd) => {\n      return [cmd.name()].concat(cmd.aliases());\n    };\n\n    const alreadyUsed = knownBy(command).find((name) =>\n      this._findCommand(name),\n    );\n    if (alreadyUsed) {\n      const existingCmd = knownBy(this._findCommand(alreadyUsed)).join('|');\n      const newCmd = knownBy(command).join('|');\n      throw new Error(\n        `cannot add command '${newCmd}' as already have command '${existingCmd}'`,\n      );\n    }\n\n    this.commands.push(command);\n  }\n\n  /**\n   * Add an option.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addOption(option) {\n    this._registerOption(option);\n\n    const oname = option.name();\n    const name = option.attributeName();\n\n    // store default value\n    if (option.negate) {\n      // --no-foo is special and defaults foo to true, unless a --foo option is already defined\n      const positiveLongFlag = option.long.replace(/^--no-/, '--');\n      if (!this._findOption(positiveLongFlag)) {\n        this.setOptionValueWithSource(\n          name,\n          option.defaultValue === undefined ? true : option.defaultValue,\n          'default',\n        );\n      }\n    } else if (option.defaultValue !== undefined) {\n      this.setOptionValueWithSource(name, option.defaultValue, 'default');\n    }\n\n    // handler for cli and env supplied values\n    const handleOptionValue = (val, invalidValueMessage, valueSource) => {\n      // val is null for optional option used without an optional-argument.\n      // val is undefined for boolean and negated option.\n      if (val == null && option.presetArg !== undefined) {\n        val = option.presetArg;\n      }\n\n      // custom processing\n      const oldValue = this.getOptionValue(name);\n      if (val !== null && option.parseArg) {\n        val = this._callParseArg(option, val, oldValue, invalidValueMessage);\n      } else if (val !== null && option.variadic) {\n        val = option._concatValue(val, oldValue);\n      }\n\n      // Fill-in appropriate missing values. Long winded but easy to follow.\n      if (val == null) {\n        if (option.negate) {\n          val = false;\n        } else if (option.isBoolean() || option.optional) {\n          val = true;\n        } else {\n          val = ''; // not normal, parseArg might have failed or be a mock function for testing\n        }\n      }\n      this.setOptionValueWithSource(name, val, valueSource);\n    };\n\n    this.on('option:' + oname, (val) => {\n      const invalidValueMessage = `error: option '${option.flags}' argument '${val}' is invalid.`;\n      handleOptionValue(val, invalidValueMessage, 'cli');\n    });\n\n    if (option.envVar) {\n      this.on('optionEnv:' + oname, (val) => {\n        const invalidValueMessage = `error: option '${option.flags}' value '${val}' from env '${option.envVar}' is invalid.`;\n        handleOptionValue(val, invalidValueMessage, 'env');\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Internal implementation shared by .option() and .requiredOption()\n   *\n   * @return {Command} `this` command for chaining\n   * @private\n   */\n  _optionEx(config, flags, description, fn, defaultValue) {\n    if (typeof flags === 'object' && flags instanceof Option) {\n      throw new Error(\n        'To add an Option object use addOption() instead of option() or requiredOption()',\n      );\n    }\n    const option = this.createOption(flags, description);\n    option.makeOptionMandatory(!!config.mandatory);\n    if (typeof fn === 'function') {\n      option.default(defaultValue).argParser(fn);\n    } else if (fn instanceof RegExp) {\n      // deprecated\n      const regex = fn;\n      fn = (val, def) => {\n        const m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n      option.default(defaultValue).argParser(fn);\n    } else {\n      option.default(fn);\n    }\n\n    return this.addOption(option);\n  }\n\n  /**\n   * Define option with `flags`, `description`, and optional argument parsing function or `defaultValue` or both.\n   *\n   * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space. A required\n   * option-argument is indicated by `<>` and an optional option-argument by `[]`.\n   *\n   * See the README for more details, and see also addOption() and requiredOption().\n   *\n   * @example\n   * program\n   *     .option('-p, --pepper', 'add pepper')\n   *     .option('-p, --pizza-type <TYPE>', 'type of pizza') // required option-argument\n   *     .option('-c, --cheese [CHEESE]', 'add extra cheese', 'mozzarella') // optional option-argument with default\n   *     .option('-t, --tip <VALUE>', 'add tip to purchase cost', parseFloat) // custom parse function\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {(Function|*)} [parseArg] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  option(flags, description, parseArg, defaultValue) {\n    return this._optionEx({}, flags, description, parseArg, defaultValue);\n  }\n\n  /**\n   * Add a required option which must have a value after parsing. This usually means\n   * the option must be specified on the command line. (Otherwise the same as .option().)\n   *\n   * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {(Function|*)} [parseArg] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  requiredOption(flags, description, parseArg, defaultValue) {\n    return this._optionEx(\n      { mandatory: true },\n      flags,\n      description,\n      parseArg,\n      defaultValue,\n    );\n  }\n\n  /**\n   * Alter parsing of short flags with optional values.\n   *\n   * @example\n   * // for `.option('-f,--flag [value]'):\n   * program.combineFlagAndOptionalValue(true);  // `-f80` is treated like `--flag=80`, this is the default behaviour\n   * program.combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`\n   *\n   * @param {boolean} [combine] - if `true` or omitted, an optional value can be specified directly after the flag.\n   * @return {Command} `this` command for chaining\n   */\n  combineFlagAndOptionalValue(combine = true) {\n    this._combineFlagAndOptionalValue = !!combine;\n    return this;\n  }\n\n  /**\n   * Allow unknown options on the command line.\n   *\n   * @param {boolean} [allowUnknown] - if `true` or omitted, no error will be thrown for unknown options.\n   * @return {Command} `this` command for chaining\n   */\n  allowUnknownOption(allowUnknown = true) {\n    this._allowUnknownOption = !!allowUnknown;\n    return this;\n  }\n\n  /**\n   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.\n   *\n   * @param {boolean} [allowExcess] - if `true` or omitted, no error will be thrown for excess arguments.\n   * @return {Command} `this` command for chaining\n   */\n  allowExcessArguments(allowExcess = true) {\n    this._allowExcessArguments = !!allowExcess;\n    return this;\n  }\n\n  /**\n   * Enable positional options. Positional means global options are specified before subcommands which lets\n   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.\n   * The default behaviour is non-positional and global options may appear anywhere on the command line.\n   *\n   * @param {boolean} [positional]\n   * @return {Command} `this` command for chaining\n   */\n  enablePositionalOptions(positional = true) {\n    this._enablePositionalOptions = !!positional;\n    return this;\n  }\n\n  /**\n   * Pass through options that come after command-arguments rather than treat them as command-options,\n   * so actual command-options come before command-arguments. Turning this on for a subcommand requires\n   * positional options to have been enabled on the program (parent commands).\n   * The default behaviour is non-positional and options may appear before or after command-arguments.\n   *\n   * @param {boolean} [passThrough] for unknown options.\n   * @return {Command} `this` command for chaining\n   */\n  passThroughOptions(passThrough = true) {\n    this._passThroughOptions = !!passThrough;\n    this._checkForBrokenPassThrough();\n    return this;\n  }\n\n  /**\n   * @private\n   */\n\n  _checkForBrokenPassThrough() {\n    if (\n      this.parent &&\n      this._passThroughOptions &&\n      !this.parent._enablePositionalOptions\n    ) {\n      throw new Error(\n        `passThroughOptions cannot be used for '${this._name}' without turning on enablePositionalOptions for parent command(s)`,\n      );\n    }\n  }\n\n  /**\n   * Whether to store option values as properties on command object,\n   * or store separately (specify false). In both cases the option values can be accessed using .opts().\n   *\n   * @param {boolean} [storeAsProperties=true]\n   * @return {Command} `this` command for chaining\n   */\n\n  storeOptionsAsProperties(storeAsProperties = true) {\n    if (this.options.length) {\n      throw new Error('call .storeOptionsAsProperties() before adding options');\n    }\n    if (Object.keys(this._optionValues).length) {\n      throw new Error(\n        'call .storeOptionsAsProperties() before setting option values',\n      );\n    }\n    this._storeOptionsAsProperties = !!storeAsProperties;\n    return this;\n  }\n\n  /**\n   * Retrieve option value.\n   *\n   * @param {string} key\n   * @return {object} value\n   */\n\n  getOptionValue(key) {\n    if (this._storeOptionsAsProperties) {\n      return this[key];\n    }\n    return this._optionValues[key];\n  }\n\n  /**\n   * Store option value.\n   *\n   * @param {string} key\n   * @param {object} value\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValue(key, value) {\n    return this.setOptionValueWithSource(key, value, undefined);\n  }\n\n  /**\n   * Store option value and where the value came from.\n   *\n   * @param {string} key\n   * @param {object} value\n   * @param {string} source - expected values are default/config/env/cli/implied\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValueWithSource(key, value, source) {\n    if (this._storeOptionsAsProperties) {\n      this[key] = value;\n    } else {\n      this._optionValues[key] = value;\n    }\n    this._optionValueSources[key] = source;\n    return this;\n  }\n\n  /**\n   * Get source of option value.\n   * Expected values are default | config | env | cli | implied\n   *\n   * @param {string} key\n   * @return {string}\n   */\n\n  getOptionValueSource(key) {\n    return this._optionValueSources[key];\n  }\n\n  /**\n   * Get source of option value. See also .optsWithGlobals().\n   * Expected values are default | config | env | cli | implied\n   *\n   * @param {string} key\n   * @return {string}\n   */\n\n  getOptionValueSourceWithGlobals(key) {\n    // global overwrites local, like optsWithGlobals\n    let source;\n    this._getCommandAndAncestors().forEach((cmd) => {\n      if (cmd.getOptionValueSource(key) !== undefined) {\n        source = cmd.getOptionValueSource(key);\n      }\n    });\n    return source;\n  }\n\n  /**\n   * Get user arguments from implied or explicit arguments.\n   * Side-effects: set _scriptPath if args included script. Used for default program name, and subcommand searches.\n   *\n   * @private\n   */\n\n  _prepareUserArgs(argv, parseOptions) {\n    if (argv !== undefined && !Array.isArray(argv)) {\n      throw new Error('first parameter to parse must be array or undefined');\n    }\n    parseOptions = parseOptions || {};\n\n    // auto-detect argument conventions if nothing supplied\n    if (argv === undefined && parseOptions.from === undefined) {\n      if (process.versions?.electron) {\n        parseOptions.from = 'electron';\n      }\n      // check node specific options for scenarios where user CLI args follow executable without scriptname\n      const execArgv = process.execArgv ?? [];\n      if (\n        execArgv.includes('-e') ||\n        execArgv.includes('--eval') ||\n        execArgv.includes('-p') ||\n        execArgv.includes('--print')\n      ) {\n        parseOptions.from = 'eval'; // internal usage, not documented\n      }\n    }\n\n    // default to using process.argv\n    if (argv === undefined) {\n      argv = process.argv;\n    }\n    this.rawArgs = argv.slice();\n\n    // extract the user args and scriptPath\n    let userArgs;\n    switch (parseOptions.from) {\n      case undefined:\n      case 'node':\n        this._scriptPath = argv[1];\n        userArgs = argv.slice(2);\n        break;\n      case 'electron':\n        // @ts-ignore: because defaultApp is an unknown property\n        if (process.defaultApp) {\n          this._scriptPath = argv[1];\n          userArgs = argv.slice(2);\n        } else {\n          userArgs = argv.slice(1);\n        }\n        break;\n      case 'user':\n        userArgs = argv.slice(0);\n        break;\n      case 'eval':\n        userArgs = argv.slice(1);\n        break;\n      default:\n        throw new Error(\n          `unexpected parse option { from: '${parseOptions.from}' }`,\n        );\n    }\n\n    // Find default name for program from arguments.\n    if (!this._name && this._scriptPath)\n      this.nameFromFilename(this._scriptPath);\n    this._name = this._name || 'program';\n\n    return userArgs;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Use parseAsync instead of parse if any of your action handlers are async.\n   *\n   * Call with no parameters to parse `process.argv`. Detects Electron and special node options like `node --eval`. Easy mode!\n   *\n   * Or call with an array of strings to parse, and optionally where the user arguments start by specifying where the arguments are `from`:\n   * - `'node'`: default, `argv[0]` is the application and `argv[1]` is the script being run, with user arguments after that\n   * - `'electron'`: `argv[0]` is the application and `argv[1]` varies depending on whether the electron application is packaged\n   * - `'user'`: just user arguments\n   *\n   * @example\n   * program.parse(); // parse process.argv and auto-detect electron and special node flags\n   * program.parse(process.argv); // assume argv[0] is app and argv[1] is script\n   * program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv] - optional, defaults to process.argv\n   * @param {object} [parseOptions] - optionally specify style of options with from: node/user/electron\n   * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'\n   * @return {Command} `this` command for chaining\n   */\n\n  parse(argv, parseOptions) {\n    this._prepareForParse();\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Call with no parameters to parse `process.argv`. Detects Electron and special node options like `node --eval`. Easy mode!\n   *\n   * Or call with an array of strings to parse, and optionally where the user arguments start by specifying where the arguments are `from`:\n   * - `'node'`: default, `argv[0]` is the application and `argv[1]` is the script being run, with user arguments after that\n   * - `'electron'`: `argv[0]` is the application and `argv[1]` varies depending on whether the electron application is packaged\n   * - `'user'`: just user arguments\n   *\n   * @example\n   * await program.parseAsync(); // parse process.argv and auto-detect electron and special node flags\n   * await program.parseAsync(process.argv); // assume argv[0] is app and argv[1] is script\n   * await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv]\n   * @param {object} [parseOptions]\n   * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'\n   * @return {Promise}\n   */\n\n  async parseAsync(argv, parseOptions) {\n    this._prepareForParse();\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    await this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  _prepareForParse() {\n    if (this._savedState === null) {\n      this.saveStateBeforeParse();\n    } else {\n      this.restoreStateBeforeParse();\n    }\n  }\n\n  /**\n   * Called the first time parse is called to save state and allow a restore before subsequent calls to parse.\n   * Not usually called directly, but available for subclasses to save their custom state.\n   *\n   * This is called in a lazy way. Only commands used in parsing chain will have state saved.\n   */\n  saveStateBeforeParse() {\n    this._savedState = {\n      // name is stable if supplied by author, but may be unspecified for root command and deduced during parsing\n      _name: this._name,\n      // option values before parse have default values (including false for negated options)\n      // shallow clones\n      _optionValues: { ...this._optionValues },\n      _optionValueSources: { ...this._optionValueSources },\n    };\n  }\n\n  /**\n   * Restore state before parse for calls after the first.\n   * Not usually called directly, but available for subclasses to save their custom state.\n   *\n   * This is called in a lazy way. Only commands used in parsing chain will have state restored.\n   */\n  restoreStateBeforeParse() {\n    if (this._storeOptionsAsProperties)\n      throw new Error(`Can not call parse again when storeOptionsAsProperties is true.\n- either make a new Command for each call to parse, or stop storing options as properties`);\n\n    // clear state from _prepareUserArgs\n    this._name = this._savedState._name;\n    this._scriptPath = null;\n    this.rawArgs = [];\n    // clear state from setOptionValueWithSource\n    this._optionValues = { ...this._savedState._optionValues };\n    this._optionValueSources = { ...this._savedState._optionValueSources };\n    // clear state from _parseCommand\n    this.args = [];\n    // clear state from _processArguments\n    this.processedArgs = [];\n  }\n\n  /**\n   * Throw if expected executable is missing. Add lots of help for author.\n   *\n   * @param {string} executableFile\n   * @param {string} executableDir\n   * @param {string} subcommandName\n   */\n  _checkForMissingExecutable(executableFile, executableDir, subcommandName) {\n    if (fs.existsSync(executableFile)) return;\n\n    const executableDirMessage = executableDir\n      ? `searched for local subcommand relative to directory '${executableDir}'`\n      : 'no directory for search for local subcommand, use .executableDir() to supply a custom directory';\n    const executableMissing = `'${executableFile}' does not exist\n - if '${subcommandName}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\n - if the default executable name is not suitable, use the executableFile option to supply a custom name or path\n - ${executableDirMessage}`;\n    throw new Error(executableMissing);\n  }\n\n  /**\n   * Execute a sub-command executable.\n   *\n   * @private\n   */\n\n  _executeSubCommand(subcommand, args) {\n    args = args.slice();\n    let launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.\n    const sourceExt = ['.js', '.ts', '.tsx', '.mjs', '.cjs'];\n\n    function findFile(baseDir, baseName) {\n      // Look for specified file\n      const localBin = path.resolve(baseDir, baseName);\n      if (fs.existsSync(localBin)) return localBin;\n\n      // Stop looking if candidate already has an expected extension.\n      if (sourceExt.includes(path.extname(baseName))) return undefined;\n\n      // Try all the extensions.\n      const foundExt = sourceExt.find((ext) =>\n        fs.existsSync(`${localBin}${ext}`),\n      );\n      if (foundExt) return `${localBin}${foundExt}`;\n\n      return undefined;\n    }\n\n    // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // executableFile and executableDir might be full path, or just a name\n    let executableFile =\n      subcommand._executableFile || `${this._name}-${subcommand._name}`;\n    let executableDir = this._executableDir || '';\n    if (this._scriptPath) {\n      let resolvedScriptPath; // resolve possible symlink for installed npm binary\n      try {\n        resolvedScriptPath = fs.realpathSync(this._scriptPath);\n      } catch {\n        resolvedScriptPath = this._scriptPath;\n      }\n      executableDir = path.resolve(\n        path.dirname(resolvedScriptPath),\n        executableDir,\n      );\n    }\n\n    // Look for a local file in preference to a command in PATH.\n    if (executableDir) {\n      let localFile = findFile(executableDir, executableFile);\n\n      // Legacy search using prefix of script name instead of command name\n      if (!localFile && !subcommand._executableFile && this._scriptPath) {\n        const legacyName = path.basename(\n          this._scriptPath,\n          path.extname(this._scriptPath),\n        );\n        if (legacyName !== this._name) {\n          localFile = findFile(\n            executableDir,\n            `${legacyName}-${subcommand._name}`,\n          );\n        }\n      }\n      executableFile = localFile || executableFile;\n    }\n\n    launchWithNode = sourceExt.includes(path.extname(executableFile));\n\n    let proc;\n    if (process.platform !== 'win32') {\n      if (launchWithNode) {\n        args.unshift(executableFile);\n        // add executable arguments to spawn\n        args = incrementNodeInspectorPort(process.execArgv).concat(args);\n\n        proc = childProcess.spawn(process.argv[0], args, { stdio: 'inherit' });\n      } else {\n        proc = childProcess.spawn(executableFile, args, { stdio: 'inherit' });\n      }\n    } else {\n      this._checkForMissingExecutable(\n        executableFile,\n        executableDir,\n        subcommand._name,\n      );\n      args.unshift(executableFile);\n      // add executable arguments to spawn\n      args = incrementNodeInspectorPort(process.execArgv).concat(args);\n      proc = childProcess.spawn(process.execPath, args, { stdio: 'inherit' });\n    }\n\n    if (!proc.killed) {\n      // testing mainly to avoid leak warnings during unit tests with mocked spawn\n      const signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n      signals.forEach((signal) => {\n        process.on(signal, () => {\n          if (proc.killed === false && proc.exitCode === null) {\n            // @ts-ignore because signals not typed to known strings\n            proc.kill(signal);\n          }\n        });\n      });\n    }\n\n    // By default terminate process when spawned process terminates.\n    const exitCallback = this._exitCallback;\n    proc.on('close', (code) => {\n      code = code ?? 1; // code is null if spawned process terminated due to a signal\n      if (!exitCallback) {\n        process.exit(code);\n      } else {\n        exitCallback(\n          new CommanderError(\n            code,\n            'commander.executeSubCommandAsync',\n            '(close)',\n          ),\n        );\n      }\n    });\n    proc.on('error', (err) => {\n      // @ts-ignore: because err.code is an unknown property\n      if (err.code === 'ENOENT') {\n        this._checkForMissingExecutable(\n          executableFile,\n          executableDir,\n          subcommand._name,\n        );\n        // @ts-ignore: because err.code is an unknown property\n      } else if (err.code === 'EACCES') {\n        throw new Error(`'${executableFile}' not executable`);\n      }\n      if (!exitCallback) {\n        process.exit(1);\n      } else {\n        const wrappedError = new CommanderError(\n          1,\n          'commander.executeSubCommandAsync',\n          '(error)',\n        );\n        wrappedError.nestedError = err;\n        exitCallback(wrappedError);\n      }\n    });\n\n    // Store the reference to the child process\n    this.runningCommand = proc;\n  }\n\n  /**\n   * @private\n   */\n\n  _dispatchSubcommand(commandName, operands, unknown) {\n    const subCommand = this._findCommand(commandName);\n    if (!subCommand) this.help({ error: true });\n\n    subCommand._prepareForParse();\n    let promiseChain;\n    promiseChain = this._chainOrCallSubCommandHook(\n      promiseChain,\n      subCommand,\n      'preSubcommand',\n    );\n    promiseChain = this._chainOrCall(promiseChain, () => {\n      if (subCommand._executableHandler) {\n        this._executeSubCommand(subCommand, operands.concat(unknown));\n      } else {\n        return subCommand._parseCommand(operands, unknown);\n      }\n    });\n    return promiseChain;\n  }\n\n  /**\n   * Invoke help directly if possible, or dispatch if necessary.\n   * e.g. help foo\n   *\n   * @private\n   */\n\n  _dispatchHelpCommand(subcommandName) {\n    if (!subcommandName) {\n      this.help();\n    }\n    const subCommand = this._findCommand(subcommandName);\n    if (subCommand && !subCommand._executableHandler) {\n      subCommand.help();\n    }\n\n    // Fallback to parsing the help flag to invoke the help.\n    return this._dispatchSubcommand(\n      subcommandName,\n      [],\n      [this._getHelpOption()?.long ?? this._getHelpOption()?.short ?? '--help'],\n    );\n  }\n\n  /**\n   * Check this.args against expected this.registeredArguments.\n   *\n   * @private\n   */\n\n  _checkNumberOfArguments() {\n    // too few\n    this.registeredArguments.forEach((arg, i) => {\n      if (arg.required && this.args[i] == null) {\n        this.missingArgument(arg.name());\n      }\n    });\n    // too many\n    if (\n      this.registeredArguments.length > 0 &&\n      this.registeredArguments[this.registeredArguments.length - 1].variadic\n    ) {\n      return;\n    }\n    if (this.args.length > this.registeredArguments.length) {\n      this._excessArguments(this.args);\n    }\n  }\n\n  /**\n   * Process this.args using this.registeredArguments and save as this.processedArgs!\n   *\n   * @private\n   */\n\n  _processArguments() {\n    const myParseArg = (argument, value, previous) => {\n      // Extra processing for nice error message on parsing failure.\n      let parsedValue = value;\n      if (value !== null && argument.parseArg) {\n        const invalidValueMessage = `error: command-argument value '${value}' is invalid for argument '${argument.name()}'.`;\n        parsedValue = this._callParseArg(\n          argument,\n          value,\n          previous,\n          invalidValueMessage,\n        );\n      }\n      return parsedValue;\n    };\n\n    this._checkNumberOfArguments();\n\n    const processedArgs = [];\n    this.registeredArguments.forEach((declaredArg, index) => {\n      let value = declaredArg.defaultValue;\n      if (declaredArg.variadic) {\n        // Collect together remaining arguments for passing together as an array.\n        if (index < this.args.length) {\n          value = this.args.slice(index);\n          if (declaredArg.parseArg) {\n            value = value.reduce((processed, v) => {\n              return myParseArg(declaredArg, v, processed);\n            }, declaredArg.defaultValue);\n          }\n        } else if (value === undefined) {\n          value = [];\n        }\n      } else if (index < this.args.length) {\n        value = this.args[index];\n        if (declaredArg.parseArg) {\n          value = myParseArg(declaredArg, value, declaredArg.defaultValue);\n        }\n      }\n      processedArgs[index] = value;\n    });\n    this.processedArgs = processedArgs;\n  }\n\n  /**\n   * Once we have a promise we chain, but call synchronously until then.\n   *\n   * @param {(Promise|undefined)} promise\n   * @param {Function} fn\n   * @return {(Promise|undefined)}\n   * @private\n   */\n\n  _chainOrCall(promise, fn) {\n    // thenable\n    if (promise && promise.then && typeof promise.then === 'function') {\n      // already have a promise, chain callback\n      return promise.then(() => fn());\n    }\n    // callback might return a promise\n    return fn();\n  }\n\n  /**\n   *\n   * @param {(Promise|undefined)} promise\n   * @param {string} event\n   * @return {(Promise|undefined)}\n   * @private\n   */\n\n  _chainOrCallHooks(promise, event) {\n    let result = promise;\n    const hooks = [];\n    this._getCommandAndAncestors()\n      .reverse()\n      .filter((cmd) => cmd._lifeCycleHooks[event] !== undefined)\n      .forEach((hookedCommand) => {\n        hookedCommand._lifeCycleHooks[event].forEach((callback) => {\n          hooks.push({ hookedCommand, callback });\n        });\n      });\n    if (event === 'postAction') {\n      hooks.reverse();\n    }\n\n    hooks.forEach((hookDetail) => {\n      result = this._chainOrCall(result, () => {\n        return hookDetail.callback(hookDetail.hookedCommand, this);\n      });\n    });\n    return result;\n  }\n\n  /**\n   *\n   * @param {(Promise|undefined)} promise\n   * @param {Command} subCommand\n   * @param {string} event\n   * @return {(Promise|undefined)}\n   * @private\n   */\n\n  _chainOrCallSubCommandHook(promise, subCommand, event) {\n    let result = promise;\n    if (this._lifeCycleHooks[event] !== undefined) {\n      this._lifeCycleHooks[event].forEach((hook) => {\n        result = this._chainOrCall(result, () => {\n          return hook(this, subCommand);\n        });\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Process arguments in context of this command.\n   * Returns action result, in case it is a promise.\n   *\n   * @private\n   */\n\n  _parseCommand(operands, unknown) {\n    const parsed = this.parseOptions(unknown);\n    this._parseOptionsEnv(); // after cli, so parseArg not called on both cli and env\n    this._parseOptionsImplied();\n    operands = operands.concat(parsed.operands);\n    unknown = parsed.unknown;\n    this.args = operands.concat(unknown);\n\n    if (operands && this._findCommand(operands[0])) {\n      return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);\n    }\n    if (\n      this._getHelpCommand() &&\n      operands[0] === this._getHelpCommand().name()\n    ) {\n      return this._dispatchHelpCommand(operands[1]);\n    }\n    if (this._defaultCommandName) {\n      this._outputHelpIfRequested(unknown); // Run the help for default command from parent rather than passing to default command\n      return this._dispatchSubcommand(\n        this._defaultCommandName,\n        operands,\n        unknown,\n      );\n    }\n    if (\n      this.commands.length &&\n      this.args.length === 0 &&\n      !this._actionHandler &&\n      !this._defaultCommandName\n    ) {\n      // probably missing subcommand and no handler, user needs help (and exit)\n      this.help({ error: true });\n    }\n\n    this._outputHelpIfRequested(parsed.unknown);\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // We do not always call this check to avoid masking a \"better\" error, like unknown command.\n    const checkForUnknownOptions = () => {\n      if (parsed.unknown.length > 0) {\n        this.unknownOption(parsed.unknown[0]);\n      }\n    };\n\n    const commandEvent = `command:${this.name()}`;\n    if (this._actionHandler) {\n      checkForUnknownOptions();\n      this._processArguments();\n\n      let promiseChain;\n      promiseChain = this._chainOrCallHooks(promiseChain, 'preAction');\n      promiseChain = this._chainOrCall(promiseChain, () =>\n        this._actionHandler(this.processedArgs),\n      );\n      if (this.parent) {\n        promiseChain = this._chainOrCall(promiseChain, () => {\n          this.parent.emit(commandEvent, operands, unknown); // legacy\n        });\n      }\n      promiseChain = this._chainOrCallHooks(promiseChain, 'postAction');\n      return promiseChain;\n    }\n    if (this.parent && this.parent.listenerCount(commandEvent)) {\n      checkForUnknownOptions();\n      this._processArguments();\n      this.parent.emit(commandEvent, operands, unknown); // legacy\n    } else if (operands.length) {\n      if (this._findCommand('*')) {\n        // legacy default command\n        return this._dispatchSubcommand('*', operands, unknown);\n      }\n      if (this.listenerCount('command:*')) {\n        // skip option check, emit event for possible misspelling suggestion\n        this.emit('command:*', operands, unknown);\n      } else if (this.commands.length) {\n        this.unknownCommand();\n      } else {\n        checkForUnknownOptions();\n        this._processArguments();\n      }\n    } else if (this.commands.length) {\n      checkForUnknownOptions();\n      // This command has subcommands and nothing hooked up at this level, so display help (and exit).\n      this.help({ error: true });\n    } else {\n      checkForUnknownOptions();\n      this._processArguments();\n      // fall through for caller to handle after calling .parse()\n    }\n  }\n\n  /**\n   * Find matching command.\n   *\n   * @private\n   * @return {Command | undefined}\n   */\n  _findCommand(name) {\n    if (!name) return undefined;\n    return this.commands.find(\n      (cmd) => cmd._name === name || cmd._aliases.includes(name),\n    );\n  }\n\n  /**\n   * Return an option matching `arg` if any.\n   *\n   * @param {string} arg\n   * @return {Option}\n   * @package\n   */\n\n  _findOption(arg) {\n    return this.options.find((option) => option.is(arg));\n  }\n\n  /**\n   * Display an error message if a mandatory option does not have a value.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @private\n   */\n\n  _checkForMissingMandatoryOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    this._getCommandAndAncestors().forEach((cmd) => {\n      cmd.options.forEach((anOption) => {\n        if (\n          anOption.mandatory &&\n          cmd.getOptionValue(anOption.attributeName()) === undefined\n        ) {\n          cmd.missingMandatoryOptionValue(anOption);\n        }\n      });\n    });\n  }\n\n  /**\n   * Display an error message if conflicting options are used together in this.\n   *\n   * @private\n   */\n  _checkForConflictingLocalOptions() {\n    const definedNonDefaultOptions = this.options.filter((option) => {\n      const optionKey = option.attributeName();\n      if (this.getOptionValue(optionKey) === undefined) {\n        return false;\n      }\n      return this.getOptionValueSource(optionKey) !== 'default';\n    });\n\n    const optionsWithConflicting = definedNonDefaultOptions.filter(\n      (option) => option.conflictsWith.length > 0,\n    );\n\n    optionsWithConflicting.forEach((option) => {\n      const conflictingAndDefined = definedNonDefaultOptions.find((defined) =>\n        option.conflictsWith.includes(defined.attributeName()),\n      );\n      if (conflictingAndDefined) {\n        this._conflictingOption(option, conflictingAndDefined);\n      }\n    });\n  }\n\n  /**\n   * Display an error message if conflicting options are used together.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @private\n   */\n  _checkForConflictingOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    this._getCommandAndAncestors().forEach((cmd) => {\n      cmd._checkForConflictingLocalOptions();\n    });\n  }\n\n  /**\n   * Parse options from `argv` removing known options,\n   * and return argv split into operands and unknown arguments.\n   *\n   * Side effects: modifies command by storing options. Does not reset state if called again.\n   *\n   * Examples:\n   *\n   *     argv => operands, unknown\n   *     --known kkk op => [op], []\n   *     op --known kkk => [op], []\n   *     sub --unknown uuu op => [sub], [--unknown uuu op]\n   *     sub -- --unknown uuu op => [sub --unknown uuu op], []\n   *\n   * @param {string[]} argv\n   * @return {{operands: string[], unknown: string[]}}\n   */\n\n  parseOptions(argv) {\n    const operands = []; // operands, not options or values\n    const unknown = []; // first unknown option and remaining unknown args\n    let dest = operands;\n    const args = argv.slice();\n\n    function maybeOption(arg) {\n      return arg.length > 1 && arg[0] === '-';\n    }\n\n    // parse options\n    let activeVariadicOption = null;\n    while (args.length) {\n      const arg = args.shift();\n\n      // literal\n      if (arg === '--') {\n        if (dest === unknown) dest.push(arg);\n        dest.push(...args);\n        break;\n      }\n\n      if (activeVariadicOption && !maybeOption(arg)) {\n        this.emit(`option:${activeVariadicOption.name()}`, arg);\n        continue;\n      }\n      activeVariadicOption = null;\n\n      if (maybeOption(arg)) {\n        const option = this._findOption(arg);\n        // recognised option, call listener to assign value with possible custom processing\n        if (option) {\n          if (option.required) {\n            const value = args.shift();\n            if (value === undefined) this.optionMissingArgument(option);\n            this.emit(`option:${option.name()}`, value);\n          } else if (option.optional) {\n            let value = null;\n            // historical behaviour is optional value is following arg unless an option\n            if (args.length > 0 && !maybeOption(args[0])) {\n              value = args.shift();\n            }\n            this.emit(`option:${option.name()}`, value);\n          } else {\n            // boolean flag\n            this.emit(`option:${option.name()}`);\n          }\n          activeVariadicOption = option.variadic ? option : null;\n          continue;\n        }\n      }\n\n      // Look for combo options following single dash, eat first one if known.\n      if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\n        const option = this._findOption(`-${arg[1]}`);\n        if (option) {\n          if (\n            option.required ||\n            (option.optional && this._combineFlagAndOptionalValue)\n          ) {\n            // option with value following in same argument\n            this.emit(`option:${option.name()}`, arg.slice(2));\n          } else {\n            // boolean option, emit and put back remainder of arg for further processing\n            this.emit(`option:${option.name()}`);\n            args.unshift(`-${arg.slice(2)}`);\n          }\n          continue;\n        }\n      }\n\n      // Look for known long flag with value, like --foo=bar\n      if (/^--[^=]+=/.test(arg)) {\n        const index = arg.indexOf('=');\n        const option = this._findOption(arg.slice(0, index));\n        if (option && (option.required || option.optional)) {\n          this.emit(`option:${option.name()}`, arg.slice(index + 1));\n          continue;\n        }\n      }\n\n      // Not a recognised option by this command.\n      // Might be a command-argument, or subcommand option, or unknown option, or help command or option.\n\n      // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.\n      if (maybeOption(arg)) {\n        dest = unknown;\n      }\n\n      // If using positionalOptions, stop processing our options at subcommand.\n      if (\n        (this._enablePositionalOptions || this._passThroughOptions) &&\n        operands.length === 0 &&\n        unknown.length === 0\n      ) {\n        if (this._findCommand(arg)) {\n          operands.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        } else if (\n          this._getHelpCommand() &&\n          arg === this._getHelpCommand().name()\n        ) {\n          operands.push(arg);\n          if (args.length > 0) operands.push(...args);\n          break;\n        } else if (this._defaultCommandName) {\n          unknown.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        }\n      }\n\n      // If using passThroughOptions, stop processing options at first command-argument.\n      if (this._passThroughOptions) {\n        dest.push(arg);\n        if (args.length > 0) dest.push(...args);\n        break;\n      }\n\n      // add arg\n      dest.push(arg);\n    }\n\n    return { operands, unknown };\n  }\n\n  /**\n   * Return an object containing local option values as key-value pairs.\n   *\n   * @return {object}\n   */\n  opts() {\n    if (this._storeOptionsAsProperties) {\n      // Preserve original behaviour so backwards compatible when still using properties\n      const result = {};\n      const len = this.options.length;\n\n      for (let i = 0; i < len; i++) {\n        const key = this.options[i].attributeName();\n        result[key] =\n          key === this._versionOptionName ? this._version : this[key];\n      }\n      return result;\n    }\n\n    return this._optionValues;\n  }\n\n  /**\n   * Return an object containing merged local and global option values as key-value pairs.\n   *\n   * @return {object}\n   */\n  optsWithGlobals() {\n    // globals overwrite locals\n    return this._getCommandAndAncestors().reduce(\n      (combinedOptions, cmd) => Object.assign(combinedOptions, cmd.opts()),\n      {},\n    );\n  }\n\n  /**\n   * Display error message and exit (or call exitOverride).\n   *\n   * @param {string} message\n   * @param {object} [errorOptions]\n   * @param {string} [errorOptions.code] - an id string representing the error\n   * @param {number} [errorOptions.exitCode] - used with process.exit\n   */\n  error(message, errorOptions) {\n    // output handling\n    this._outputConfiguration.outputError(\n      `${message}\\n`,\n      this._outputConfiguration.writeErr,\n    );\n    if (typeof this._showHelpAfterError === 'string') {\n      this._outputConfiguration.writeErr(`${this._showHelpAfterError}\\n`);\n    } else if (this._showHelpAfterError) {\n      this._outputConfiguration.writeErr('\\n');\n      this.outputHelp({ error: true });\n    }\n\n    // exit handling\n    const config = errorOptions || {};\n    const exitCode = config.exitCode || 1;\n    const code = config.code || 'commander.error';\n    this._exit(exitCode, code, message);\n  }\n\n  /**\n   * Apply any option related environment variables, if option does\n   * not have a value from cli or client code.\n   *\n   * @private\n   */\n  _parseOptionsEnv() {\n    this.options.forEach((option) => {\n      if (option.envVar && option.envVar in process.env) {\n        const optionKey = option.attributeName();\n        // Priority check. Do not overwrite cli or options from unknown source (client-code).\n        if (\n          this.getOptionValue(optionKey) === undefined ||\n          ['default', 'config', 'env'].includes(\n            this.getOptionValueSource(optionKey),\n          )\n        ) {\n          if (option.required || option.optional) {\n            // option can take a value\n            // keep very simple, optional always takes value\n            this.emit(`optionEnv:${option.name()}`, process.env[option.envVar]);\n          } else {\n            // boolean\n            // keep very simple, only care that envVar defined and not the value\n            this.emit(`optionEnv:${option.name()}`);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Apply any implied option values, if option is undefined or default value.\n   *\n   * @private\n   */\n  _parseOptionsImplied() {\n    const dualHelper = new DualOptions(this.options);\n    const hasCustomOptionValue = (optionKey) => {\n      return (\n        this.getOptionValue(optionKey) !== undefined &&\n        !['default', 'implied'].includes(this.getOptionValueSource(optionKey))\n      );\n    };\n    this.options\n      .filter(\n        (option) =>\n          option.implied !== undefined &&\n          hasCustomOptionValue(option.attributeName()) &&\n          dualHelper.valueFromOption(\n            this.getOptionValue(option.attributeName()),\n            option,\n          ),\n      )\n      .forEach((option) => {\n        Object.keys(option.implied)\n          .filter((impliedKey) => !hasCustomOptionValue(impliedKey))\n          .forEach((impliedKey) => {\n            this.setOptionValueWithSource(\n              impliedKey,\n              option.implied[impliedKey],\n              'implied',\n            );\n          });\n      });\n  }\n\n  /**\n   * Argument `name` is missing.\n   *\n   * @param {string} name\n   * @private\n   */\n\n  missingArgument(name) {\n    const message = `error: missing required argument '${name}'`;\n    this.error(message, { code: 'commander.missingArgument' });\n  }\n\n  /**\n   * `Option` is missing an argument.\n   *\n   * @param {Option} option\n   * @private\n   */\n\n  optionMissingArgument(option) {\n    const message = `error: option '${option.flags}' argument missing`;\n    this.error(message, { code: 'commander.optionMissingArgument' });\n  }\n\n  /**\n   * `Option` does not have a value, and is a mandatory option.\n   *\n   * @param {Option} option\n   * @private\n   */\n\n  missingMandatoryOptionValue(option) {\n    const message = `error: required option '${option.flags}' not specified`;\n    this.error(message, { code: 'commander.missingMandatoryOptionValue' });\n  }\n\n  /**\n   * `Option` conflicts with another option.\n   *\n   * @param {Option} option\n   * @param {Option} conflictingOption\n   * @private\n   */\n  _conflictingOption(option, conflictingOption) {\n    // The calling code does not know whether a negated option is the source of the\n    // value, so do some work to take an educated guess.\n    const findBestOptionFromValue = (option) => {\n      const optionKey = option.attributeName();\n      const optionValue = this.getOptionValue(optionKey);\n      const negativeOption = this.options.find(\n        (target) => target.negate && optionKey === target.attributeName(),\n      );\n      const positiveOption = this.options.find(\n        (target) => !target.negate && optionKey === target.attributeName(),\n      );\n      if (\n        negativeOption &&\n        ((negativeOption.presetArg === undefined && optionValue === false) ||\n          (negativeOption.presetArg !== undefined &&\n            optionValue === negativeOption.presetArg))\n      ) {\n        return negativeOption;\n      }\n      return positiveOption || option;\n    };\n\n    const getErrorMessage = (option) => {\n      const bestOption = findBestOptionFromValue(option);\n      const optionKey = bestOption.attributeName();\n      const source = this.getOptionValueSource(optionKey);\n      if (source === 'env') {\n        return `environment variable '${bestOption.envVar}'`;\n      }\n      return `option '${bestOption.flags}'`;\n    };\n\n    const message = `error: ${getErrorMessage(option)} cannot be used with ${getErrorMessage(conflictingOption)}`;\n    this.error(message, { code: 'commander.conflictingOption' });\n  }\n\n  /**\n   * Unknown option `flag`.\n   *\n   * @param {string} flag\n   * @private\n   */\n\n  unknownOption(flag) {\n    if (this._allowUnknownOption) return;\n    let suggestion = '';\n\n    if (flag.startsWith('--') && this._showSuggestionAfterError) {\n      // Looping to pick up the global options too\n      let candidateFlags = [];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      let command = this;\n      do {\n        const moreFlags = command\n          .createHelp()\n          .visibleOptions(command)\n          .filter((option) => option.long)\n          .map((option) => option.long);\n        candidateFlags = candidateFlags.concat(moreFlags);\n        command = command.parent;\n      } while (command && !command._enablePositionalOptions);\n      suggestion = suggestSimilar(flag, candidateFlags);\n    }\n\n    const message = `error: unknown option '${flag}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownOption' });\n  }\n\n  /**\n   * Excess arguments, more than expected.\n   *\n   * @param {string[]} receivedArgs\n   * @private\n   */\n\n  _excessArguments(receivedArgs) {\n    if (this._allowExcessArguments) return;\n\n    const expected = this.registeredArguments.length;\n    const s = expected === 1 ? '' : 's';\n    const forSubcommand = this.parent ? ` for '${this.name()}'` : '';\n    const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;\n    this.error(message, { code: 'commander.excessArguments' });\n  }\n\n  /**\n   * Unknown command.\n   *\n   * @private\n   */\n\n  unknownCommand() {\n    const unknownName = this.args[0];\n    let suggestion = '';\n\n    if (this._showSuggestionAfterError) {\n      const candidateNames = [];\n      this.createHelp()\n        .visibleCommands(this)\n        .forEach((command) => {\n          candidateNames.push(command.name());\n          // just visible alias\n          if (command.alias()) candidateNames.push(command.alias());\n        });\n      suggestion = suggestSimilar(unknownName, candidateNames);\n    }\n\n    const message = `error: unknown command '${unknownName}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownCommand' });\n  }\n\n  /**\n   * Get or set the program version.\n   *\n   * This method auto-registers the \"-V, --version\" option which will print the version number.\n   *\n   * You can optionally supply the flags and description to override the defaults.\n   *\n   * @param {string} [str]\n   * @param {string} [flags]\n   * @param {string} [description]\n   * @return {(this | string | undefined)} `this` command for chaining, or version string if no arguments\n   */\n\n  version(str, flags, description) {\n    if (str === undefined) return this._version;\n    this._version = str;\n    flags = flags || '-V, --version';\n    description = description || 'output the version number';\n    const versionOption = this.createOption(flags, description);\n    this._versionOptionName = versionOption.attributeName();\n    this._registerOption(versionOption);\n\n    this.on('option:' + versionOption.name(), () => {\n      this._outputConfiguration.writeOut(`${str}\\n`);\n      this._exit(0, 'commander.version', str);\n    });\n    return this;\n  }\n\n  /**\n   * Set the description.\n   *\n   * @param {string} [str]\n   * @param {object} [argsDescription]\n   * @return {(string|Command)}\n   */\n  description(str, argsDescription) {\n    if (str === undefined && argsDescription === undefined)\n      return this._description;\n    this._description = str;\n    if (argsDescription) {\n      this._argsDescription = argsDescription;\n    }\n    return this;\n  }\n\n  /**\n   * Set the summary. Used when listed as subcommand of parent.\n   *\n   * @param {string} [str]\n   * @return {(string|Command)}\n   */\n  summary(str) {\n    if (str === undefined) return this._summary;\n    this._summary = str;\n    return this;\n  }\n\n  /**\n   * Set an alias for the command.\n   *\n   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string} [alias]\n   * @return {(string|Command)}\n   */\n\n  alias(alias) {\n    if (alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility\n\n    /** @type {Command} */\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let command = this;\n    if (\n      this.commands.length !== 0 &&\n      this.commands[this.commands.length - 1]._executableHandler\n    ) {\n      // assume adding alias for last added executable subcommand, rather than this\n      command = this.commands[this.commands.length - 1];\n    }\n\n    if (alias === command._name)\n      throw new Error(\"Command alias can't be the same as its name\");\n    const matchingCommand = this.parent?._findCommand(alias);\n    if (matchingCommand) {\n      // c.f. _registerCommand\n      const existingCmd = [matchingCommand.name()]\n        .concat(matchingCommand.aliases())\n        .join('|');\n      throw new Error(\n        `cannot add alias '${alias}' to command '${this.name()}' as already have command '${existingCmd}'`,\n      );\n    }\n\n    command._aliases.push(alias);\n    return this;\n  }\n\n  /**\n   * Set aliases for the command.\n   *\n   * Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string[]} [aliases]\n   * @return {(string[]|Command)}\n   */\n\n  aliases(aliases) {\n    // Getter for the array of aliases is the main reason for having aliases() in addition to alias().\n    if (aliases === undefined) return this._aliases;\n\n    aliases.forEach((alias) => this.alias(alias));\n    return this;\n  }\n\n  /**\n   * Set / get the command usage `str`.\n   *\n   * @param {string} [str]\n   * @return {(string|Command)}\n   */\n\n  usage(str) {\n    if (str === undefined) {\n      if (this._usage) return this._usage;\n\n      const args = this.registeredArguments.map((arg) => {\n        return humanReadableArgName(arg);\n      });\n      return []\n        .concat(\n          this.options.length || this._helpOption !== null ? '[options]' : [],\n          this.commands.length ? '[command]' : [],\n          this.registeredArguments.length ? args : [],\n        )\n        .join(' ');\n    }\n\n    this._usage = str;\n    return this;\n  }\n\n  /**\n   * Get or set the name of the command.\n   *\n   * @param {string} [str]\n   * @return {(string|Command)}\n   */\n\n  name(str) {\n    if (str === undefined) return this._name;\n    this._name = str;\n    return this;\n  }\n\n  /**\n   * Set the name of the command from script filename, such as process.argv[1],\n   * or require.main.filename, or __filename.\n   *\n   * (Used internally and public although not documented in README.)\n   *\n   * @example\n   * program.nameFromFilename(require.main.filename);\n   *\n   * @param {string} filename\n   * @return {Command}\n   */\n\n  nameFromFilename(filename) {\n    this._name = path.basename(filename, path.extname(filename));\n\n    return this;\n  }\n\n  /**\n   * Get or set the directory for searching for executable subcommands of this command.\n   *\n   * @example\n   * program.executableDir(__dirname);\n   * // or\n   * program.executableDir('subcommands');\n   *\n   * @param {string} [path]\n   * @return {(string|null|Command)}\n   */\n\n  executableDir(path) {\n    if (path === undefined) return this._executableDir;\n    this._executableDir = path;\n    return this;\n  }\n\n  /**\n   * Return program help documentation.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout\n   * @return {string}\n   */\n\n  helpInformation(contextOptions) {\n    const helper = this.createHelp();\n    const context = this._getOutputContext(contextOptions);\n    helper.prepareContext({\n      error: context.error,\n      helpWidth: context.helpWidth,\n      outputHasColors: context.hasColors,\n    });\n    const text = helper.formatHelp(this, helper);\n    if (context.hasColors) return text;\n    return this._outputConfiguration.stripColor(text);\n  }\n\n  /**\n   * @typedef HelpContext\n   * @type {object}\n   * @property {boolean} error\n   * @property {number} helpWidth\n   * @property {boolean} hasColors\n   * @property {function} write - includes stripColor if needed\n   *\n   * @returns {HelpContext}\n   * @private\n   */\n\n  _getOutputContext(contextOptions) {\n    contextOptions = contextOptions || {};\n    const error = !!contextOptions.error;\n    let baseWrite;\n    let hasColors;\n    let helpWidth;\n    if (error) {\n      baseWrite = (str) => this._outputConfiguration.writeErr(str);\n      hasColors = this._outputConfiguration.getErrHasColors();\n      helpWidth = this._outputConfiguration.getErrHelpWidth();\n    } else {\n      baseWrite = (str) => this._outputConfiguration.writeOut(str);\n      hasColors = this._outputConfiguration.getOutHasColors();\n      helpWidth = this._outputConfiguration.getOutHelpWidth();\n    }\n    const write = (str) => {\n      if (!hasColors) str = this._outputConfiguration.stripColor(str);\n      return baseWrite(str);\n    };\n    return { error, write, hasColors, helpWidth };\n  }\n\n  /**\n   * Output help information for this command.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  outputHelp(contextOptions) {\n    let deprecatedCallback;\n    if (typeof contextOptions === 'function') {\n      deprecatedCallback = contextOptions;\n      contextOptions = undefined;\n    }\n\n    const outputContext = this._getOutputContext(contextOptions);\n    /** @type {HelpTextEventContext} */\n    const eventContext = {\n      error: outputContext.error,\n      write: outputContext.write,\n      command: this,\n    };\n\n    this._getCommandAndAncestors()\n      .reverse()\n      .forEach((command) => command.emit('beforeAllHelp', eventContext));\n    this.emit('beforeHelp', eventContext);\n\n    let helpInformation = this.helpInformation({ error: outputContext.error });\n    if (deprecatedCallback) {\n      helpInformation = deprecatedCallback(helpInformation);\n      if (\n        typeof helpInformation !== 'string' &&\n        !Buffer.isBuffer(helpInformation)\n      ) {\n        throw new Error('outputHelp callback must return a string or a Buffer');\n      }\n    }\n    outputContext.write(helpInformation);\n\n    if (this._getHelpOption()?.long) {\n      this.emit(this._getHelpOption().long); // deprecated\n    }\n    this.emit('afterHelp', eventContext);\n    this._getCommandAndAncestors().forEach((command) =>\n      command.emit('afterAllHelp', eventContext),\n    );\n  }\n\n  /**\n   * You can pass in flags and a description to customise the built-in help option.\n   * Pass in false to disable the built-in help option.\n   *\n   * @example\n   * program.helpOption('-?, --help' 'show help'); // customise\n   * program.helpOption(false); // disable\n   *\n   * @param {(string | boolean)} flags\n   * @param {string} [description]\n   * @return {Command} `this` command for chaining\n   */\n\n  helpOption(flags, description) {\n    // Support disabling built-in help option.\n    if (typeof flags === 'boolean') {\n      // true is not an expected value. Do something sensible but no unit-test.\n      // istanbul ignore if\n      if (flags) {\n        this._helpOption = this._helpOption ?? undefined; // preserve existing option\n      } else {\n        this._helpOption = null; // disable\n      }\n      return this;\n    }\n\n    // Customise flags and description.\n    flags = flags ?? '-h, --help';\n    description = description ?? 'display help for command';\n    this._helpOption = this.createOption(flags, description);\n\n    return this;\n  }\n\n  /**\n   * Lazy create help option.\n   * Returns null if has been disabled with .helpOption(false).\n   *\n   * @returns {(Option | null)} the help option\n   * @package\n   */\n  _getHelpOption() {\n    // Lazy create help option on demand.\n    if (this._helpOption === undefined) {\n      this.helpOption(undefined, undefined);\n    }\n    return this._helpOption;\n  }\n\n  /**\n   * Supply your own option to use for the built-in help option.\n   * This is an alternative to using helpOption() to customise the flags and description etc.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addHelpOption(option) {\n    this._helpOption = option;\n    return this;\n  }\n\n  /**\n   * Output help information and exit.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  help(contextOptions) {\n    this.outputHelp(contextOptions);\n    let exitCode = Number(process.exitCode ?? 0); // process.exitCode does allow a string or an integer, but we prefer just a number\n    if (\n      exitCode === 0 &&\n      contextOptions &&\n      typeof contextOptions !== 'function' &&\n      contextOptions.error\n    ) {\n      exitCode = 1;\n    }\n    // message: do not have all displayed text available so only passing placeholder.\n    this._exit(exitCode, 'commander.help', '(outputHelp)');\n  }\n\n  /**\n   * // Do a little typing to coordinate emit and listener for the help text events.\n   * @typedef HelpTextEventContext\n   * @type {object}\n   * @property {boolean} error\n   * @property {Command} command\n   * @property {function} write\n   */\n\n  /**\n   * Add additional text to be displayed with the built-in help.\n   *\n   * Position is 'before' or 'after' to affect just this command,\n   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.\n   *\n   * @param {string} position - before or after built-in help\n   * @param {(string | Function)} text - string to add, or a function returning a string\n   * @return {Command} `this` command for chaining\n   */\n\n  addHelpText(position, text) {\n    const allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];\n    if (!allowedValues.includes(position)) {\n      throw new Error(`Unexpected value for position to addHelpText.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n\n    const helpEvent = `${position}Help`;\n    this.on(helpEvent, (/** @type {HelpTextEventContext} */ context) => {\n      let helpStr;\n      if (typeof text === 'function') {\n        helpStr = text({ error: context.error, command: context.command });\n      } else {\n        helpStr = text;\n      }\n      // Ignore falsy value when nothing to output.\n      if (helpStr) {\n        context.write(`${helpStr}\\n`);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Output help information if help flags specified\n   *\n   * @param {Array} args - array of options to search for help flags\n   * @private\n   */\n\n  _outputHelpIfRequested(args) {\n    const helpOption = this._getHelpOption();\n    const helpRequested = helpOption && args.find((arg) => helpOption.is(arg));\n    if (helpRequested) {\n      this.outputHelp();\n      // (Do not have all displayed text available so only passing placeholder.)\n      this._exit(0, 'commander.helpDisplayed', '(outputHelp)');\n    }\n  }\n}\n\n/**\n * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).\n *\n * @param {string[]} args - array of arguments from node.execArgv\n * @returns {string[]}\n * @private\n */\n\nfunction incrementNodeInspectorPort(args) {\n  // Testing for these options:\n  //  --inspect[=[host:]port]\n  //  --inspect-brk[=[host:]port]\n  //  --inspect-port=[host:]port\n  return args.map((arg) => {\n    if (!arg.startsWith('--inspect')) {\n      return arg;\n    }\n    let debugOption;\n    let debugHost = '127.0.0.1';\n    let debugPort = '9229';\n    let match;\n    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\n      // e.g. --inspect\n      debugOption = match[1];\n    } else if (\n      (match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null\n    ) {\n      debugOption = match[1];\n      if (/^\\d+$/.test(match[3])) {\n        // e.g. --inspect=1234\n        debugPort = match[3];\n      } else {\n        // e.g. --inspect=localhost\n        debugHost = match[3];\n      }\n    } else if (\n      (match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null\n    ) {\n      // e.g. --inspect=localhost:1234\n      debugOption = match[1];\n      debugHost = match[3];\n      debugPort = match[4];\n    }\n\n    if (debugOption && debugPort !== '0') {\n      return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;\n    }\n    return arg;\n  });\n}\n\n/**\n * @returns {boolean | undefined}\n * @package\n */\nfunction useColor() {\n  // Test for common conventions.\n  // NB: the observed behaviour is in combination with how author adds color! For example:\n  //   - we do not test NODE_DISABLE_COLORS, but util:styletext does\n  //   - we do test NO_COLOR, but Chalk does not\n  //\n  // References:\n  // https://no-color.org\n  // https://bixense.com/clicolors/\n  // https://github.com/nodejs/node/blob/0a00217a5f67ef4a22384cfc80eb6dd9a917fdc1/lib/internal/tty.js#L109\n  // https://github.com/chalk/supports-color/blob/c214314a14bcb174b12b3014b2b0a8de375029ae/index.js#L33\n  // (https://force-color.org recent web page from 2023, does not match major javascript implementations)\n\n  if (\n    process.env.NO_COLOR ||\n    process.env.FORCE_COLOR === '0' ||\n    process.env.FORCE_COLOR === 'false'\n  )\n    return false;\n  if (process.env.FORCE_COLOR || process.env.CLICOLOR_FORCE !== undefined)\n    return true;\n  return undefined;\n}\n\nexports.Command = Command;\nexports.useColor = useColor; // exporting for tests\n","const { Argument } = require('./lib/argument.js');\nconst { Command } = require('./lib/command.js');\nconst { CommanderError, InvalidArgumentError } = require('./lib/error.js');\nconst { Help } = require('./lib/help.js');\nconst { Option } = require('./lib/option.js');\n\nexports.program = new Command();\n\nexports.createCommand = (name) => new Command(name);\nexports.createOption = (flags, description) => new Option(flags, description);\nexports.createArgument = (name, description) => new Argument(name, description);\n\n/**\n * Expose classes\n */\n\nexports.Command = Command;\nexports.Option = Option;\nexports.Argument = Argument;\nexports.Help = Help;\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\nexports.InvalidOptionArgumentError = InvalidArgumentError; // Deprecated\n","import { getDefaultExportFromCjs } from \"\u0000commonjsHelpers.js\";\nimport { __require as requireCommander } from \"C:/Users/benz/commands/JavaScript/CLI/node_modules/.pnpm/commander@13.0.0/node_modules/commander/index.js\";\nvar commanderExports = requireCommander();\nexport { commanderExports as __moduleExports };\nexport default /*@__PURE__*/getDefaultExportFromCjs(commanderExports);"],"names":["require$$0","cmd","option","argument","command","str","suggestSimilar","suggestSimilar_1","require$$1","require$$2","require$$3","require$$5","require$$6","require$$7","require$$8","require$$9","path","error","require$$4"],"mappings":"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","x_google_ignoreList":[0,1,3,4,5,6,7,8]}