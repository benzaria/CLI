{"version":3,"sources":["../src/index.ts","../src/lib/chalk.ts"],"sourcesContent":["import { Command } from \"commander\";\r\nimport { input } from \"@inquirer/prompts\";\r\nimport chalk from \"./lib/chalk\";\r\nimport ansi from \"ansi-escapes\";\r\nimport \"../types.d\";\r\n\r\n// import chalkEx from \"./lib/chalk.deprecated\";\r\n\r\nconst echo = console.log;\r\nconst write = process.stdout.write.bind(process.stdout);\r\n\r\n(async function () {\r\n\r\n    const program = new Command();\r\n\r\n    program\r\n        .name('mycli')\r\n        .version('1.0.0')\r\n        .description('An example CLI tool');\r\n\r\n    program\r\n        .option('-d, --debug [bool]', 'enable debug mode', false)\r\n        .option('-c, --copy <dest>', 'copy file to destination')\r\n        .argument('<file>', 'file to process')\r\n        .action((file: string, options: { debug: boolean, copy: string }) => {\r\n            echo(`Debug mode : ${options.debug}`);\r\n            echo(`copy mode : ${options.copy}`);\r\n            echo(`Processing file: ${file}`);\r\n        });\r\n\r\n    program\r\n        .command('clone <repo>')\r\n        .action((options: { clone: URL }) => {\r\n            echo('cloning', options.clone)\r\n        });\r\n\r\n    /* test chalk extend /\r\n    echo('Line 1');\r\n    echo('Line 2');\r\n    echo('Line 3');\r\n    chalk\r\n        .upline(2, chalk.bold.red('This replaces Line 2!'))\r\n        .dnline(2);\r\n\r\n    await chalk.XY(11, 5, 'sheeeeeesh')\r\n    await chalk.XY()\r\n    /**/\r\n\r\n    program.configureHelp({\r\n        sortSubcommands: true,\r\n        sortOptions: true,\r\n        optionTerm: (option) => `${chalk.blueBright(option.short)}, ${chalk.redBright(option.long)}`,\r\n        subcommandTerm: (cmd) => `${cmd.name()}`\r\n    });\r\n\r\n\r\n    program.parse(process.argv);\r\n})()\r\n","import { Chalk } from \"chalk\";\r\nimport * as ansi from \"ansi-escapes\";\r\nimport './chalk.d'\r\n\r\nconst { stdin, stdout } = process;\r\n\r\nconst chalk = new Chalk();\r\nconst write = stdout.write.bind(process.stdout);\r\n\r\nchalk.upline = function (line = 1, replace = '') {\r\n    write(ansi.cursorUp(line) + replace);\r\n    return this;\r\n}\r\n\r\nchalk.dnline = function (line = 1, replace = '') {\r\n    write(ansi.cursorDown(line) + replace);\r\n    return this;\r\n}\r\n\r\nchalk.move = function (x, y, replace = '') {\r\n    if (x && y)\r\n        write(ansi.cursorMove(x, y) + replace);\r\n    return this;\r\n}\r\n\r\nchalk.XY = function (x, y, replace = '') {\r\n    if (x && y) {\r\n        write(ansi.cursorTo(x, y) + replace);\r\n        return this;\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        stdin.setRawMode(true);\r\n        stdin.resume();\r\n        stdin.setEncoding(\"utf8\");\r\n\r\n        process.stdout.write(\"\\x1b[6n\");\r\n\r\n        stdin.once(\"data\", (data: string) => {\r\n            const match = /\\x1b\\[(\\d+);(\\d+)R/.exec(data);\r\n            stdin.setRawMode(false);\r\n            stdin.pause();\r\n\r\n            if (match) {\r\n                resolve({ x: +match[1], y: +match[2] });\r\n            } else {\r\n                reject(new Error(\"Failed to parse cursor position\"));\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nexport default chalk;"],"mappings":";AAAA,SAAS,eAAe;;;ACAxB,SAAS,aAAa;AACtB,YAAY,UAAU;AAGtB,IAAM,EAAE,OAAO,OAAO,IAAI;AAE1B,IAAM,QAAQ,IAAI,MAAM;AACxB,IAAM,QAAQ,OAAO,MAAM,KAAK,QAAQ,MAAM;AAE9C,MAAM,SAAS,SAAU,OAAO,GAAG,UAAU,IAAI;AAC7C,QAAW,cAAS,IAAI,IAAI,OAAO;AACnC,SAAO;AACX;AAEA,MAAM,SAAS,SAAU,OAAO,GAAG,UAAU,IAAI;AAC7C,QAAW,gBAAW,IAAI,IAAI,OAAO;AACrC,SAAO;AACX;AAEA,MAAM,OAAO,SAAU,GAAG,GAAG,UAAU,IAAI;AACvC,MAAI,KAAK;AACL,UAAW,gBAAW,GAAG,CAAC,IAAI,OAAO;AACzC,SAAO;AACX;AAEA,MAAM,KAAK,SAAU,GAAG,GAAG,UAAU,IAAI;AACrC,MAAI,KAAK,GAAG;AACR,UAAW,cAAS,GAAG,CAAC,IAAI,OAAO;AACnC,WAAO;AAAA,EACX;AACA,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,UAAM,WAAW,IAAI;AACrB,UAAM,OAAO;AACb,UAAM,YAAY,MAAM;AAExB,YAAQ,OAAO,MAAM,SAAS;AAE9B,UAAM,KAAK,QAAQ,CAAC,SAAiB;AACjC,YAAM,QAAQ,qBAAqB,KAAK,IAAI;AAC5C,YAAM,WAAW,KAAK;AACtB,YAAM,MAAM;AAEZ,UAAI,OAAO;AACP,gBAAQ,EAAE,GAAG,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;AAAA,MAC1C,OAAO;AACH,eAAO,IAAI,MAAM,iCAAiC,CAAC;AAAA,MACvD;AAAA,IACJ,CAAC;AAAA,EACL,CAAC;AACL;AAEA,IAAO,gBAAQ;;;AD3Cf,IAAM,OAAO,QAAQ;AACrB,IAAMA,SAAQ,QAAQ,OAAO,MAAM,KAAK,QAAQ,MAAM;AAAA,CAErD,iBAAkB;AAEf,QAAM,UAAU,IAAI,QAAQ;AAE5B,UACK,KAAK,OAAO,EACZ,QAAQ,OAAO,EACf,YAAY,qBAAqB;AAEtC,UACK,OAAO,sBAAsB,qBAAqB,KAAK,EACvD,OAAO,qBAAqB,0BAA0B,EACtD,SAAS,UAAU,iBAAiB,EACpC,OAAO,CAAC,MAAc,YAA8C;AACjE,SAAK,gBAAgB,QAAQ,KAAK,EAAE;AACpC,SAAK,eAAe,QAAQ,IAAI,EAAE;AAClC,SAAK,oBAAoB,IAAI,EAAE;AAAA,EACnC,CAAC;AAEL,UACK,QAAQ,cAAc,EACtB,OAAO,CAAC,YAA4B;AACjC,SAAK,WAAW,QAAQ,KAAK;AAAA,EACjC,CAAC;AAcL,UAAQ,cAAc;AAAA,IAClB,iBAAiB;AAAA,IACjB,aAAa;AAAA,IACb,YAAY,CAAC,WAAW,GAAG,cAAM,WAAW,OAAO,KAAK,CAAC,KAAK,cAAM,UAAU,OAAO,IAAI,CAAC;AAAA,IAC1F,gBAAgB,CAAC,QAAQ,GAAG,IAAI,KAAK,CAAC;AAAA,EAC1C,CAAC;AAGD,UAAQ,MAAM,QAAQ,IAAI;AAC9B,GAAG;","names":["write"]}